"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9855],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>d});var n=a(7294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(a),h=o,d=u["".concat(s,".").concat(h)]||u[h]||m[h]||r;return a?n.createElement(d,l(l({ref:t},p),{},{components:a})):n.createElement(d,l({ref:t},p))}));function d(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,l=new Array(r);l[0]=h;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:o,l[1]=i;for(var c=2;c<r;c++)l[c]=a[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},8814:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var n=a(7462),o=(a(7294),a(3905));const r={title:"The Zalgo Effect and Resource Leakage - A Case",authors:"lukas8219",tags:["nodejs","zalgoeffect","code"]},l="First of all, what's the Zalgo Effect?",i={permalink:"/blog/2024/06/01/Post1",source:"@site/blog/2024-06-01/Post1.md",title:"The Zalgo Effect and Resource Leakage - A Case",description:"Zalgo Effect is an term used to describe unexpected outcomes of mixing sync and async javascript code.",date:"2024-06-01T00:00:00.000Z",formattedDate:"June 1, 2024",tags:[{label:"nodejs",permalink:"/blog/tags/nodejs"},{label:"zalgoeffect",permalink:"/blog/tags/zalgoeffect"},{label:"code",permalink:"/blog/tags/code"}],readingTime:3.08,hasTruncateMarker:!1,authors:[{name:"Lucas Weis Polesello",title:"SRE | Senior Software Engineer @ LumaHealth",url:"https://github.com/lukas8219",email:"lucas.polesello@lwpsoftwares.com | lucas.c4d@gmail.com",imageURL:"https://github.com/lukas8219.png",key:"lukas8219"}],frontMatter:{title:"The Zalgo Effect and Resource Leakage - A Case",authors:"lukas8219",tags:["nodejs","zalgoeffect","code"]},nextItem:{title:"Redis is more than a Cache-n1 - Delaying Jobs",permalink:"/blog/2024/06/01/Post2"}},s={authorsImageUrls:[void 0]},c=[{value:"Fixing the problem",id:"fixing-the-problem",level:2}],p={toc:c},u="wrapper";function m(e){let{components:t,...a}=e;return(0,o.kt)(u,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Zalgo Effect is an term used to describe unexpected outcomes of mixing ",(0,o.kt)("inlineCode",{parentName:"p"},"sync")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"async")," javascript code."),(0,o.kt)("p",null,"It means - if you mix these two approaches SOMETHING weird will happen."),(0,o.kt)("p",null,"It's one of those things you kinda ",(0,o.kt)("em",{parentName:"p"},"don't understand")," until you see it in real production systems."),(0,o.kt)("h1",{id:"so-what-it-has-to-do-with-resource-leakage"},"So what it has to do with Resource Leakage?"),(0,o.kt)("p",null,"One day, our SRE team received a couple PagerDuty alerts claiming our services were restarting and not able to work properly due to ",(0,o.kt)("inlineCode",{parentName:"p"},"Error: No channels left to allocate")," - ie RabbitMQ connections were maxing out in channel allocation. (For RabbitMQ reference into Channels and Connections)"),(0,o.kt)("p",null,"It was clear some code was leaking channel creations. No one knew what could potentially be - but God I had studied this ",(0,o.kt)("inlineCode",{parentName:"p"},"Zalgo Effect")," in ",(0,o.kt)("inlineCode",{parentName:"p"},"NodeJS Design Patterns")," Book and it clicked me something."),(0,o.kt)("h1",{id:"how-was-i-so-sure-the-zalgo-was-the-culprit"},"How was I so sure the Zalgo was the culprit?"),(0,o.kt)("p",null,"The service that was throwing that error was only responsible for fan out a couple messages to a lot of other services - so it was easy as creating a ",(0,o.kt)("inlineCode",{parentName:"p"},"Queue")," object and running N promises concurrently to publish some message.\nChecking the RabbitMQ Management UI showed me that we created N channels for that connection."),(0,o.kt)("h1",{id:"but-why-it-only-happened-in-some-scenarios"},"But why it only happened in some scenarios?"),(0,o.kt)("p",null,"That's where the ",(0,o.kt)("inlineCode",{parentName:"p"},"Zalgo Effect")," pops in."),(0,o.kt)("p",null,"Our code was built back in ~2015 - Node 4. The callback style was the mainstream. Our Engineers created the abstraction ",(0,o.kt)("inlineCode",{parentName:"p"},"Queue")," which dealt with almost 50% of our Event-Driven Architecture by itself and had to make the ",(0,o.kt)("inlineCode",{parentName:"p"},"class")," style w/ async initializations - not so easily with callbacks."),(0,o.kt)("p",null,"So the code assumed the following:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Assert exchange, queues and necessary resources - via something we could call ",(0,o.kt)("inlineCode",{parentName:"li"},"consumeChannel"),".",(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},"The consume channel is created whenever the connection is made."))),(0,o.kt)("li",{parentName:"ol"},"Our ",(0,o.kt)("inlineCode",{parentName:"li"},"confirmChannel")," - ie the channel we used to ",(0,o.kt)("inlineCode",{parentName:"li"},"publish")," events was lazily created - mixing ",(0,o.kt)("inlineCode",{parentName:"li"},"async")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"sync")," code.")),(0,o.kt)("p",null,"So the problem lives in 2)."),(0,o.kt)("p",null,"Imagine the following:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"We ",(0,o.kt)("inlineCode",{parentName:"li"},"assertConfirmChannel"),(0,o.kt)("a",{parentName:"li",href:"/assets/Captura_de_Tela_2024-03-15_%C3%A0s_19.06"},"Download Captura",(0,o.kt)("em",{parentName:"a"},"de_Tela_2024-03-15"),"\xe0s_19.06"))),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/assets/Captura_de_Tela_2024-03-15_%C3%A0s_19.07"},"Download Captura",(0,o.kt)("em",{parentName:"a"},"de_Tela_2024-03-15"),"\xe0s_19.07")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/assets/Captura_de_Tela_2024-03-15_%C3%A0s_19.07"},"Download Captura",(0,o.kt)("em",{parentName:"a"},"de_Tela_2024-03-15"),"\xe0s_19.07")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"It check's whether the channel EXISTS or NOT."),(0,o.kt)("li",{parentName:"ul"},"If not, create via ",(0,o.kt)("inlineCode",{parentName:"li"},"PROMISE")," and return control to EventLoop"),(0,o.kt)("li",{parentName:"ul"},"If does, return it")),(0,o.kt)("p",null,"What happens, if the ",(0,o.kt)("inlineCode",{parentName:"p"},"two concurrent promises")," reaches the same ",(0,o.kt)("inlineCode",{parentName:"p"},"if")," without the first promise resolving? We try to create the channel two times and override them - thus keeping channels open but just using only the last one."),(0,o.kt)("p",null,"This is where the code was ",(0,o.kt)("em",{parentName:"p"},"leaking")," channels."),(0,o.kt)("h2",{id:"fixing-the-problem"},"Fixing the problem"),(0,o.kt)("p",null,"Well, the fix we ",(0,o.kt)("em",{parentName:"p"},"actually shipped")," was simply calling 1 Promise and await it and then fan out the other promises."),(0,o.kt)("p",null,"But we made it simple due to risks and since the code is being refactored into a new style."),(0,o.kt)("h1",{id:"how-can-i-fix-if-i-see-something-like-that"},"How can I fix If I see something like that?"),(0,o.kt)("p",null,"If you want a real solution, here's what the V2 would look like - the idea is to create Promises and assign variables with them, instead of doing ",(0,o.kt)("inlineCode",{parentName:"p"},"await")," on it. Example as below:"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/assets/Captura_de_Tela_2024-03-15_%C3%A0s_19.18"},"Download Captura",(0,o.kt)("em",{parentName:"a"},"de_Tela_2024-03-15"),"\xe0s_19.18")),(0,o.kt)("p",null,"This easily fixes the problem - by setting a variable as promise and checking its existence."),(0,o.kt)("p",null,"A more robust style, where you actually need to initialize a couple of resources, you could do something like below"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/assets/Captura_de_Tela_2024-03-15_%C3%A0s_19.19"},"Download Captura",(0,o.kt)("em",{parentName:"a"},"de_Tela_2024-03-15"),"\xe0s_19.19")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Create a function to execute the entire Promise."),(0,o.kt)("li",{parentName:"ol"},"Set up some reference to it"),(0,o.kt)("li",{parentName:"ol"},"If requested the same, just use the same Promise.")),(0,o.kt)("h1",{id:"ok---but-why-it-fixes-the-problem"},"Ok - but why it fixes the problem?"),(0,o.kt)("p",null,"The idea is to make sure - we are running things in a sync manner and just making the promises settled on their timing. We need to think about the synchronous code execution block to reason about our promises usage."))}m.isMDXComponent=!0}}]);