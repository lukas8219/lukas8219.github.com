"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3753],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>g});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},p="mdxType",h={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},b=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(t),b=r,g=p["".concat(s,".").concat(b)]||p[b]||h[b]||o;return t?a.createElement(g,l(l({ref:n},u),{},{components:t})):a.createElement(g,l({ref:n},u))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=b;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[p]="string"==typeof e?e:r,l[1]=i;for(var c=2;c<o;c++)l[c]=t[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}b.displayName="MDXCreateElement"},103:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=t(7462),r=(t(7294),t(3905));const o={tags:["chaos","chaosengineering","rabbitmq","rabbit","amqp","opensource"]},l=void 0,i={unversionedId:"learn-in-public/Engineering/RabbitMQ/AMQP Resources Chaos Engineering",id:"learn-in-public/Engineering/RabbitMQ/AMQP Resources Chaos Engineering",title:"AMQP Resources Chaos Engineering",description:"rabbitcommon has a module called delegate that does the module calling in a safe way - abstracting having to call the genserver.",source:"@site/docs/learn-in-public/1. Engineering/RabbitMQ/AMQP Resources Chaos Engineering.md",sourceDirName:"learn-in-public/1. Engineering/RabbitMQ",slug:"/learn-in-public/Engineering/RabbitMQ/AMQP Resources Chaos Engineering",permalink:"/docs/learn-in-public/Engineering/RabbitMQ/AMQP Resources Chaos Engineering",draft:!1,tags:[{label:"chaos",permalink:"/docs/tags/chaos"},{label:"chaosengineering",permalink:"/docs/tags/chaosengineering"},{label:"rabbitmq",permalink:"/docs/tags/rabbitmq"},{label:"rabbit",permalink:"/docs/tags/rabbit"},{label:"amqp",permalink:"/docs/tags/amqp"},{label:"opensource",permalink:"/docs/tags/opensource"}],version:"current",frontMatter:{tags:["chaos","chaosengineering","rabbitmq","rabbit","amqp","opensource"]},sidebar:"learn-in-public",previous:{title:"Unix utilities",permalink:"/docs/learn-in-public/Engineering/Operating Systems/Unix utilities"},next:{title:"Classic Queue V2",permalink:"/docs/learn-in-public/Engineering/RabbitMQ/Classic Queue V2"}},s={},c=[],u={toc:c},p="wrapper";function h(e){let{components:n,...t}=e;return(0,r.kt)(p,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"rabbit_common has a module called ",(0,r.kt)("inlineCode",{parentName:"p"},"delegate")," that does the module calling in a safe way - abstracting having to call the gen_server."),(0,r.kt)("p",null,"But how do we fetch the Erlang PID to call ",(0,r.kt)("inlineCode",{parentName:"p"},"delegate:invoke")," ?\nrabbit uses ",(0,r.kt)("inlineCode",{parentName:"p"},"pg")," - process_groups to group a bunch of processes by module."),(0,r.kt)("p",null,"To fetch channels we can use ",(0,r.kt)("inlineCode",{parentName:"p"},"pg_local:get_members(rabbit_channels)")," and it should return something like this."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erlang"},"(rabbit@MacBook-Pro-de-Lucas)31> pg_local:get_members(rabbit_channels).\n[<0.1322.0>,<0.1336.0>]\n")),(0,r.kt)("p",null,"A simple snippet to gracefully force shutdown a channel in Erlang VM is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erlang"},"Pid = hd(pg_local:get_members(rabbit_channels)).\ndelegate:invoke(Pid, {rabbit_channel, shutdown, []}).\n%% one liner delegate:invoke(hd(pg_local:get_members(rabbit_channels)), {rabbit_channel, shutdown, []}).\n")),(0,r.kt)("p",null,"Utility method to randomize channels shutdown by % of live channels"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erlang"},'shutdown_random_channels(Percentage) when Percentage > 0, Percentage =< 100 ->\n\nChannels = pg_local:get_members(rabbit_channels),\nTotalCount = length(Channels),\nShutdownCount = ceil(TotalCount * (Percentage / 100)),\nRandomChannels = lists:sublist(\n    lists:sort([{rand:uniform(), Chan} || Chan <- Channels]),\n    ShutdownCount\n),\n[delegate:invoke(Pid, {rabbit_channel, shutdown, []}) || {_, Pid} <- RandomChannels],\n\n{ok, length(RandomChannels)};\n\nshutdown_random_channels(_) ->\n\n{error, "Percentage must be between 1 and 100"}.\n')),(0,r.kt)("p",null,"To execute this remotely you can do something like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"rabbitmqctl eval 'Channels = pg_local:get_members(rabbit_channels), TotalCount = length(Channels), ShutdownCount = ceil(TotalCount * (25/100)), RandomChannels = lists:sublist(lists:sort([{rand:uniform(), Chan} || Chan <- Channels]), ShutdownCount), [delegate:invoke(Pid, {rabbit_channel, shutdown, []}) || {_, Pid} <- RandomChannels].' \n")),(0,r.kt)("p",null,"The main problem seems to be that doing the above CLI it does not trigger a message from the Server->Client of ",(0,r.kt)("inlineCode",{parentName:"p"},"Channel.Closed")),(0,r.kt)("p",null,"How can we trigger it?"),(0,r.kt)("p",null,"We can verify the Channel.Close never reaches the server by doing"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const amqplib = require('amqplib');\nconst repl = require('repl');\n\nasync function createConnection() {\n    try {\n        // Create connection\n        const connection = await amqplib.connect('amqp://localhost');\n        \n        // Create channel\n        const channel = await connection.createChannel();\n\n        // Handle channel closure\n        channel.on('close', () => {\n            console.log('Channel closed');\n        });\n\n        // Handle channel errors\n        channel.on('error', (err) => {\n            console.error('Channel error:', err);\n        });\n\n        return { connection, channel };\n    } catch (error) {\n        console.error('Error creating connection:', error);\n        throw error;\n    }\n}\n\n// Initialize connection and channel\nlet channelInstance;\ncreateConnection().then(({ channel }) => {\n    channelInstance = channel;\n    console.log('RabbitMQ connection established');\n});\n\n// Start REPL server\nconst replServer = repl.start({\n    prompt: 'rabbitmq> '\n});\n\n// Expose publish function to REPL context\nreplServer.context.publish = async (queue, message) => {\n    if (!channelInstance) {\n        console.error('Channel not initialized');\n        return;\n    }\n    try {\n        await channelInstance.assertQueue(queue);\n        channelInstance.sendToQueue(queue, Buffer.from(message));\n        console.log(`Message sent to queue: ${queue}`);\n    } catch (error) {\n        console.error('Error publishing message:', error);\n    }\n};\n\nmodule.exports = createConnection;\n")),(0,r.kt)("p",null,"A better way to do so is by using AMQP Protocol and forcing issues on it. If we declare a ",(0,r.kt)("inlineCode",{parentName:"p"},"passive")," queue within a Channel ( passive means running a declare won't create resources and fail if does not exist - with a ",(0,r.kt)("inlineCode",{parentName:"p"},"Channel.Close"),");\nCall the method"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erlang"},"rabbit_channel:do(Ch2, #'queue.declare'{ passive = true,\n                                             queue   = \"non-existent-queue\" }),\n")),(0,r.kt)("p",null,"Generate ",(0,r.kt)("inlineCode",{parentName:"p"},"script.erl")," and put in under the rabbit main folder"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-erlang"},'-module(script).\n-compile(export_all).\n-include("deps/rabbit_common/include/rabbit_framing.hrl").\n-on_load(close/0).\n\nclose () ->\n  Channels = pg_local:get_members(rabbit_channels),\n  TotalCount = length(Channels),\n  ShutdownCount = ceil(TotalCount * (25/100)),\n  RandomChannels = lists:sublist(lists:sort([{rand:uniform(), Chan} || Chan <- Channels]), ShutdownCount), \n  [delegate:invoke(Pid, fun(P) -> rabbit_channel:do(P, #\'queue.declare\'{passive=true, queue = <<"non-existent-queue">>}) end) || {_, Pid} <- RandomChannels],\n  ok.\n')),(0,r.kt)("p",null,"Then run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'expect -c \'spawn rabbitmq-diagnostics -n rabbit@MacBook-Pro-de-Lucas remote_shell; expect ">" { send "{ok, script} = c(\\"script\\").\\r" }; expect "{ok,script}" { send "\\x03" }; interact\'\n')),(0,r.kt)("p",null,"There were too many issues dealing with rabbitmq data structures, like importing ",(0,r.kt)("inlineCode",{parentName:"p"},".hrl")," files so\nI ended up creating a open-source plugin ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/lukas8219/rabbit-chaos-api"},"Rabbit Chaos API")))}h.isMDXComponent=!0}}]);