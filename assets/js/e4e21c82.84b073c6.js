"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7324],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=o,d=u["".concat(s,".").concat(m)]||u[m]||h[m]||i;return n?a.createElement(d,r(r({ref:t},p),{},{components:n})):a.createElement(d,r({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:o,r[1]=l;for(var c=2;c<i;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3678:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=n(7462),o=(n(7294),n(3905));const i={title:"The Zalgo Effect and Resource Leakage - A Case",authors:"lukas8219",tags:["nodejs","zalgoeffect","code"]},r="First of all, what's the Zalgo Effect?",l={permalink:"/blog/2024/03/15/zalgo-effect-resource-leakage",source:"@site/blog/2024-03-15/zalgo-effect-resource-leakage.md",title:"The Zalgo Effect and Resource Leakage - A Case",description:"Zalgo Effect is an term used to describe unexpected outcomes of mixing sync and async javascript code.",date:"2024-03-15T00:00:00.000Z",formattedDate:"March 15, 2024",tags:[{label:"nodejs",permalink:"/blog/tags/nodejs"},{label:"zalgoeffect",permalink:"/blog/tags/zalgoeffect"},{label:"code",permalink:"/blog/tags/code"}],readingTime:3.05,hasTruncateMarker:!1,authors:[{name:"Lucas Weis Polesello",title:"SRE | Senior Software Engineer @ LumaHealth",url:"https://github.com/lukas8219",email:"lucas.polesello@lwpsoftwares.com | lucas.c4d@gmail.com",socials:{x:"https://x.com/luucaspole"},imageURL:"https://github.com/lukas8219.png",key:"lukas8219"}],frontMatter:{title:"The Zalgo Effect and Resource Leakage - A Case",authors:"lukas8219",tags:["nodejs","zalgoeffect","code"]},prevItem:{title:"Redis is more than a Cache - Delaying Jobs",permalink:"/blog/2024/03/15/redis-is-more-than-cache-job-delay"},nextItem:{title:"NodeJS 101 -  Lazy Initialization",permalink:"/blog/2023/12/24/nodejs-101-lazy-init"}},s={authorsImageUrls:[void 0]},c=[{value:"Fixing the problem",id:"fixing-the-problem",level:2}],p={toc:c},u="wrapper";function h(e){let{components:t,...i}=e;return(0,o.kt)(u,(0,a.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Zalgo Effect is an term used to describe unexpected outcomes of mixing ",(0,o.kt)("inlineCode",{parentName:"p"},"sync")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"async")," javascript code."),(0,o.kt)("p",null,"It means - if you mix these two approaches SOMETHING weird will happen."),(0,o.kt)("p",null,"It's one of those things you kinda ",(0,o.kt)("em",{parentName:"p"},"don't understand")," until you see it in real production systems."),(0,o.kt)("h1",{id:"so-what-it-has-to-do-with-resource-leakage"},"So what it has to do with Resource Leakage?"),(0,o.kt)("p",null,"One day, our SRE team received a couple PagerDuty alerts claiming our services were restarting and not able to work properly due to ",(0,o.kt)("inlineCode",{parentName:"p"},"Error: No channels left to allocate")," - ie RabbitMQ connections were maxing out in channel allocation. (For RabbitMQ reference into Channels and Connections)"),(0,o.kt)("p",null,"It was clear some code was leaking channel creations. No one knew what could potentially be - but God I had studied this ",(0,o.kt)("inlineCode",{parentName:"p"},"Zalgo Effect")," in ",(0,o.kt)("inlineCode",{parentName:"p"},"NodeJS Design Patterns")," Book and it clicked me something."),(0,o.kt)("h1",{id:"how-was-i-so-sure-the-zalgo-was-the-culprit"},"How was I so sure the Zalgo was the culprit?"),(0,o.kt)("p",null,"The service that was throwing that error was only responsible for fan out a couple messages to a lot of other services - so it was easy as creating a ",(0,o.kt)("inlineCode",{parentName:"p"},"Queue")," object and running N promises concurrently to publish some message.\nChecking the RabbitMQ Management UI showed me that we created N channels for that connection."),(0,o.kt)("h1",{id:"but-why-it-only-happened-in-some-scenarios"},"But why it only happened in some scenarios?"),(0,o.kt)("p",null,"That's where the ",(0,o.kt)("inlineCode",{parentName:"p"},"Zalgo Effect")," pops in."),(0,o.kt)("p",null,"Our code was built back in ~2015 - Node 4. The callback style was the mainstream. Our Engineers created the abstraction ",(0,o.kt)("inlineCode",{parentName:"p"},"Queue")," which dealt with almost 50% of our Event-Driven Architecture by itself and had to make the ",(0,o.kt)("inlineCode",{parentName:"p"},"class")," style w/ async initializations - not so easily with callbacks."),(0,o.kt)("p",null,"So the code assumed the following:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Assert exchange, queues and necessary resources - via something we could call ",(0,o.kt)("inlineCode",{parentName:"li"},"consumeChannel"),".",(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},"The consume channel is created whenever the connection is made."))),(0,o.kt)("li",{parentName:"ol"},"Our ",(0,o.kt)("inlineCode",{parentName:"li"},"confirmChannel")," - ie the channel we used to ",(0,o.kt)("inlineCode",{parentName:"li"},"publish")," events was lazily created - mixing ",(0,o.kt)("inlineCode",{parentName:"li"},"async")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"sync")," code.")),(0,o.kt)("p",null,"So the problem lives in 2)."),(0,o.kt)("p",null,"Imagine the following:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"We ",(0,o.kt)("inlineCode",{parentName:"li"},"assertConfirmChannel"),(0,o.kt)("img",{alt:"old-assert-confirm",src:n(2392).Z,width:"995",height:"113"}),(0,o.kt)("img",{alt:"old-get-instance",src:n(8959).Z,width:"1050",height:"211"})),(0,o.kt)("li",{parentName:"ul"},"It check's whether the channel EXISTS or NOT."),(0,o.kt)("li",{parentName:"ul"},"If not, create via ",(0,o.kt)("inlineCode",{parentName:"li"},"PROMISE")," and return control to EventLoop"),(0,o.kt)("li",{parentName:"ul"},"If does, return it")),(0,o.kt)("p",null,"What happens, if the ",(0,o.kt)("inlineCode",{parentName:"p"},"two concurrent promises")," reaches the same ",(0,o.kt)("inlineCode",{parentName:"p"},"if")," without the first promise resolving? We try to create the channel two times and override them - thus keeping channels open but just using only the last one."),(0,o.kt)("p",null,"This is where the code was ",(0,o.kt)("em",{parentName:"p"},"leaking")," channels."),(0,o.kt)("h2",{id:"fixing-the-problem"},"Fixing the problem"),(0,o.kt)("p",null,"Well, the fix we ",(0,o.kt)("em",{parentName:"p"},"actually shipped")," was simply calling 1 Promise and await it and then fan out the other promises."),(0,o.kt)("p",null,"But we made it simple due to risks and since the code is being refactored into a new style."),(0,o.kt)("h1",{id:"how-can-i-fix-if-i-see-something-like-that"},"How can I fix If I see something like that?"),(0,o.kt)("p",null,"If you want a real solution, here's what the V2 would look like - the idea is to create Promises and assign variables with them, instead of doing ",(0,o.kt)("inlineCode",{parentName:"p"},"await")," on it. Example as below:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"assert-zalgo",src:n(9358).Z,width:"853",height:"197"})),(0,o.kt)("p",null,"This easily fixes the problem - by setting a variable as promise and checking its existence."),(0,o.kt)("p",null,"A more robust style, where you actually need to initialize a couple of resources, you could do something like below"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"get-or-create-client-print",src:n(3030).Z,width:"903",height:"741"})),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Create a function to execute the entire Promise."),(0,o.kt)("li",{parentName:"ol"},"Set up some reference to it"),(0,o.kt)("li",{parentName:"ol"},"If requested the same, just use the same Promise.")),(0,o.kt)("h1",{id:"ok---but-why-it-fixes-the-problem"},"Ok - but why it fixes the problem?"),(0,o.kt)("p",null,"The idea is to make sure - we are running things in a sync manner and just making the promises settled on their timing. We need to think about the synchronous code execution block to reason about our promises usage."))}h.isMDXComponent=!0},9358:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/assert-zalgo-307baf5abd886e4c3cc7e39d5203e33f.webp"},3030:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/get-or-create-client-print-86ec69f70ed8bcf441bbb64549391b1e.webp"},2392:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/old-assert-confirm-8a21da4bb68e7ae7f2d355388a8a8a4d.webp"},8959:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/old-get-instance-24b7afc5993aeba0f081985202d20afa.webp"}}]);