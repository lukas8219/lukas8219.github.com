"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5189],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>d});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),u=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=u(a),h=r,d=m["".concat(s,".").concat(h)]||m[h]||c[h]||o;return a?n.createElement(d,l(l({ref:t},p),{},{components:a})):n.createElement(d,l({ref:t},p))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=h;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[m]="string"==typeof e?e:r,l[1]=i;for(var u=2;u<o;u++)l[u]=a[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},8123:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var n=a(7462),r=(a(7294),a(3905));const o={title:"Redis is more than a Cache-n1 - Delaying Jobs",authors:"lukas8219",tags:["redis","jobs","pubsub","luma","more","than","cache"]},l=void 0,i={permalink:"/blog/2024/06/01/Post2",source:"@site/blog/2024-06-01/Post2.md",title:"Redis is more than a Cache-n1 - Delaying Jobs",description:"My current company - Luma Health Inc - has an Event-Driven Architecture where all of our backend systems interact via async messaging/jobs. Thus our backbone is sustained by an AMQP broker - RabbitMQ - which routes the jobs to interested services.",date:"2024-06-01T00:00:00.000Z",formattedDate:"June 1, 2024",tags:[{label:"redis",permalink:"/blog/tags/redis"},{label:"jobs",permalink:"/blog/tags/jobs"},{label:"pubsub",permalink:"/blog/tags/pubsub"},{label:"luma",permalink:"/blog/tags/luma"},{label:"more",permalink:"/blog/tags/more"},{label:"than",permalink:"/blog/tags/than"},{label:"cache",permalink:"/blog/tags/cache"}],readingTime:3.295,hasTruncateMarker:!1,authors:[{name:"Lucas Weis Polesello",title:"SRE | Senior Software Engineer @ LumaHealth",url:"https://github.com/lukas8219",email:"lucas.polesello@lwpsoftwares.com | lucas.c4d@gmail.com",imageURL:"https://github.com/lukas8219.png",key:"lukas8219"}],frontMatter:{title:"Redis is more than a Cache-n1 - Delaying Jobs",authors:"lukas8219",tags:["redis","jobs","pubsub","luma","more","than","cache"]},prevItem:{title:"The Zalgo Effect and Resource Leakage - A Case",permalink:"/blog/2024/06/01/Post1"},nextItem:{title:"NodeJS Lazy Initialization",permalink:"/blog/2024/06/01/Post3"}},s={authorsImageUrls:[void 0]},u=[{value:"The Unreliable Design",id:"the-unreliable-design",level:2},{value:"The Issues",id:"the-issues",level:2},{value:"The solution",id:"the-solution",level:2},{value:"Results",id:"results",level:2},{value:"Note",id:"note",level:3}],p={toc:u},m="wrapper";function c(e){let{components:t,...a}=e;return(0,r.kt)(m,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"My current company - ",(0,r.kt)("a",{parentName:"p",href:"https://www.lumahealth.io/"},"Luma Health Inc")," - has an ",(0,r.kt)("inlineCode",{parentName:"p"},"Event-Driven Architecture")," where all of our backend systems interact via async messaging/jobs. Thus our backbone is sustained by an AMQP broker - RabbitMQ - which routes the jobs to interested services."),(0,r.kt)("p",null,"Since our jobs are very critical - we cannot support failures AND should design to make the system more resilient because well..we don't want a patient not being notified of their appointment, appointments not being created when they should, patients showing off into facilities where they were never notified the patient had something scheduled."),(0,r.kt)("p",null,"Besides the infra and product reliability - some use cases could need postponing - maybe reaching out to an external system who's offline/or not responding. Maybe some error which needs a retry - who knows? "),(0,r.kt)("p",null,"The fact is, delaying/retry is a very frequent requirement into Event Driven Architectures. With this a service responsible for doing it was created - and it worked fine."),(0,r.kt)("p",null,"But - as the company sold bigger contracts and grew up in scale - this system was almost stressed out and not reliable."),(0,r.kt)("h2",{id:"the-unreliable-design"},"The Unreliable Design"),(0,r.kt)("p",null,"Before giving the symptoms, let's talk about the organism itself - the service old design."),(0,r.kt)("p",null,"The design was really straightforward - if our service handlers asked for a postpone OR we failed to send the message to RabbitMQ - we just insert the JSON object from the Job into a Redis ",(0,r.kt)("inlineCode",{parentName:"p"},"Sorted Set")," and using the ",(0,r.kt)("inlineCode",{parentName:"p"},"Score")," as the timestamp which it was meant to be retried/published again."),(0,r.kt)("p",null,"To publish back into RabbitMQ the postponed messages, a job would be triggered each 5 seconds - doing the following:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Read from a ",(0,r.kt)("inlineCode",{parentName:"li"},"set")," key containing all the existing ",(0,r.kt)("inlineCode",{parentName:"li"},"sorted set")," keys - basically the queue name"),(0,r.kt)("li",{parentName:"ol"},"Fetch run a ",(0,r.kt)("inlineCode",{parentName:"li"},"zrangebyscore")," from 0 to current timestamp BUT ",(0,r.kt)("inlineCode",{parentName:"li"},"limit")," to 5K jobs."),(0,r.kt)("li",{parentName:"ol"},"Publish the job and remove it from ",(0,r.kt)("inlineCode",{parentName:"li"},"sorted set"))),(0,r.kt)("h2",{id:"the-issues"},"The Issues"),(0,r.kt)("p",null,"This solution actually scaled up until 1-2 years ago when we started having issues with it - the main one's being:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"It could not catch up to a huge backlog of delayed messages"),(0,r.kt)("li",{parentName:"ol"},"It would eventually OOM or SPIKE up to 40GB of memory",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"Due to things being fetched into memory AND some instability OR even some internal logic - we could end up shoveling too much data into Redis - the service just died \ud83d\udc80"))),(0,r.kt)("li",{parentName:"ol"},"We could not scale horizontally - due to consuming and fetching objects into memory before deleting them.")),(0,r.kt)("h2",{id:"the-solution"},"The solution"),(0,r.kt)("p",null,"The solution was very simple: we implemented something that I liked to call ",(0,r.kt)("inlineCode",{parentName:"p"},"streaming approach")),(0,r.kt)("p",null,"Using the same data structure, we are now:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Running a ",(0,r.kt)("inlineCode",{parentName:"li"},"zcount")," from 0 to current timestamp",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Counting the amount of Jobs -> returning N"))),(0,r.kt)("li",{parentName:"ol"},"Creating an ",(0,r.kt)("inlineCode",{parentName:"li"},"Async Iterator")," for N times - that used the ",(0,r.kt)("inlineCode",{parentName:"li"},"zpopmin")," method from Redis",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"zpopmin")," basically returns AND removes the least score object - ie most recent timestamp")))),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"processor")," for the SortedSet\n",(0,r.kt)("a",{parentName:"p",href:"/assets/Captura_de_Tela_2024-03-15_%C3%A0s_19.47"},"Download Captura",(0,r.kt)("em",{parentName:"a"},"de_Tela_2024-03-15"),"\xe0s_19.47")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Async Iterator"),"\n",(0,r.kt)("a",{parentName:"p",href:"/assets/Captura_de_Tela_2024-03-15_%C3%A0s_19.47"},"Download Captura",(0,r.kt)("em",{parentName:"a"},"de_Tela_2024-03-15"),"\xe0s_19.47")),(0,r.kt)("p",null,"And that's _all!"),(0,r.kt)("p",null,"This simple algorithm change annihilated the need for:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Big In Memory fetches - makes our memory allocation big"),(0,r.kt)("li",{parentName:"ol"},"Limit of 5K in fetches - makes our throughput lower")),(0,r.kt)("h2",{id:"results"},"Results"),(0,r.kt)("p",null,"I think the screenshots can speak for themselves but:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"We processed the entire backlog of 40GB of pending jobs pretty quickly"),(0,r.kt)("li",{parentName:"ul"},"From a constant usage of ~8GB - we dropped down to ~200MB"),(0,r.kt)("li",{parentName:"ul"},"We are now - trying to be play safe and still oversize - safely allocating 1/4 of the resources.")),(0,r.kt)("p",null,"Money-wise: We are talking at least of 1K USD/month AND more in the future if we can lower our Rediscache instance."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/assets/Captura_de_Tela_2024-03-14_%C3%A0s_22.45"},"Download Captura",(0,r.kt)("em",{parentName:"a"},"de_Tela_2024-03-14"),"\xe0s_22.45")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/assets/Captura_de_Tela_2024-03-14_%C3%A0s_23.52"},"Download Captura",(0,r.kt)("em",{parentName:"a"},"de_Tela_2024-03-14"),"\xe0s_23.52"),"\n",(0,r.kt)("a",{parentName:"p",href:"/assets/Captura_de_Tela_2024-03-15_%C3%A0s_20.05"},"Download Captura",(0,r.kt)("em",{parentName:"a"},"de_Tela_2024-03-15"),"\xe0s_20.05")),(0,r.kt)("h3",{id:"note"},"Note"),(0,r.kt)("p",null,"We currently have more enhancements in the roadmap - such as making the job delaying via RPC, using different storages for different postpone amount (1milli, 1 second, 1 day, 1 week++) and making it more reliable overall."))}c.isMDXComponent=!0}}]);