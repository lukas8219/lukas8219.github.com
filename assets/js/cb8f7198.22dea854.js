"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1135],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,u=d["".concat(s,".").concat(m)]||d[m]||h[m]||o;return n?a.createElement(u,i(i({ref:t},p),{},{components:n})):a.createElement(u,i({ref:t},p))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2434:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={},i=void 0,l={unversionedId:"learn-in-public/Engineering/AMQP/AMQP protocol - network layer",id:"learn-in-public/Engineering/AMQP/AMQP protocol - network layer",title:"AMQP protocol - network layer",description:"Each #AMQPframe consists of:",source:"@site/docs/learn-in-public/1. Engineering/AMQP/AMQP protocol - network layer.md",sourceDirName:"learn-in-public/1. Engineering/AMQP",slug:"/learn-in-public/Engineering/AMQP/AMQP protocol - network layer",permalink:"/docs/learn-in-public/Engineering/AMQP/AMQP protocol - network layer",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"learn-in-public",previous:{title:"AMQP protocol - Model and Protocol",permalink:"/docs/learn-in-public/Engineering/AMQP/AMQP protocol - Model and Protocol"},next:{title:"The Organization Roadmap",permalink:"/docs/learn-in-public/Engineering/Business, Companies and Processes/The Organization Roadmap"}},s={},c=[{value:"#AMQPDataTypes",id:"amqpdatatypes",level:2},{value:"#AMQPFrames",id:"amqpframes",level:2},{value:"#frameend",id:"frameend",level:3},{value:"#AMQPMethodFrames",id:"amqpmethodframes",level:2},{value:"Establishing a Connection",id:"establishing-a-connection",level:2},{value:"Receiving Frames and Packets",id:"receiving-frames-and-packets",level:3}],p={toc:c},d="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"#AMQP is a binary protocol. Everything is organized into packet frames, and those frames carries informations about methods, classes and more."),(0,r.kt)("p",null,"Each #AMQPframe consists of:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"0th Uint8: -> Type of packet",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"1: #Method"),(0,r.kt)("li",{parentName:"ol"},"2: #Header"),(0,r.kt)("li",{parentName:"ol"},"3: #Body"),(0,r.kt)("li",{parentName:"ol"},"8: #Heartbeat"))),(0,r.kt)("li",{parentName:"ol"},"1th Uint16 -> Channel ID - Usually a integer between 1 and 256"),(0,r.kt)("li",{parentName:"ol"},"3th Uint32 -> #FrameSize: The byte length for the entire frame"),(0,r.kt)("li",{parentName:"ol"},"Framesize + 3th -> The #frameEnd: A Value to identify the frameEnd -> always 206")),(0,r.kt)("p",null,"To write a #client library for #amqp all clients libraries start the connection while a persistent TCP connection. In this example, we are using NodeJS."),(0,r.kt)("p",null,"#AMQP protocol uses a #RCP approach which each method is invoked via #TCP frames that must follow the protocol. Much like #OOP, the #packets encapsulate the method calls."),(0,r.kt)("h2",{id:"amqpdatatypes"},"#AMQPDataTypes"),(0,r.kt)("p",null,"The AMQP frames supports the following data types"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Integers -> 1 to 8 #octets"),(0,r.kt)("li",{parentName:"ol"},"Bits -> Single #octets : represents ON/OFF values. Boolean"),(0,r.kt)("li",{parentName:"ol"},"Short strings -> Single #octet w/ string values ranging up until 255 #octets",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"it does fulfill 2 spaces, since we need the length of it also."))),(0,r.kt)("li",{parentName:"ol"},"Longstrings -> holds binary data?"),(0,r.kt)("li",{parentName:"ol"},"Table -> key-value pairs where value is one of the DataTypes")),(0,r.kt)("h2",{id:"amqpframes"},"#AMQPFrames"),(0,r.kt)("p",null,"All #frames consist of a headers(7 #octet), a body and a #frameend single #octet\nSo each time we #parse these frames, we need to read the headers, read or not the body and then ensure the #frameend has the correct 206 value."),(0,r.kt)("p",null,"When implementing the protocol and performance is a concern we should use #readaheadbuffering or #gatheringreads to avoid constant calls to SO."),(0,r.kt)("p",null,"Each #frame should also inform the PAYLOAD size, which is basically the Method payload."),(0,r.kt)("h3",{id:"frameend"},"#frameend"),(0,r.kt)("p",null,'The #frameend is used "to detect framing errors caused by incorrect client or server implementations." These would case #amqpconnection #connection being closed.'),(0,r.kt)("p",null,"The frame-end octet MUST always be the hexadecimal value %xCE"),(0,r.kt)("h2",{id:"amqpmethodframes"},"#AMQPMethodFrames"),(0,r.kt)("p",null,"#methodframes"),(0,r.kt)("p",null,"To process a method frame, we should read, separately, the first two #octet which will give us, in order, the classId and the methodId."),(0,r.kt)("p",null,"![","[docs/learn-in-public/1. Engineering/AMQP/Captura de Tela 2023-11-29 \xe0s 10.52.40.png]","]"),(0,r.kt)("h2",{id:"establishing-a-connection"},"Establishing a Connection"),(0,r.kt)("p",null,'To establish a connection with AMQP, the client needs to connect via TCP Socket and emit a packet telling the AMQP service which AMQP version we are talking to.\nThis packet is called the #protocolheaders and should contain the following buffer\n"AMQP0{version}" as bytes'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const net = require('net');\n\n//This should start the entire RPC flow to connect to AMQP\nconst connection = net.connect(5672, 'localhost', () => {\n    const packet = Buffer.from(`AMQP${String.fromCharCode(0,0,9,1)}`);\n    connection.write(packet);\n})\n")),(0,r.kt)("h3",{id:"receiving-frames-and-packets"},"Receiving Frames and Packets"),(0,r.kt)("p",null,"As soon as the AMQP broker receives the above packets, it will start communicating while establishing connections, the way we handle it is a little bit different than usual packets, since AMQP uses Channels, the connection channel Id Is always 0."),(0,r.kt)("p",null,"Follow the #AMQPframe above guidelines, we can start reading the received frame. In this example we are using #DataView of #nodejs to abstract our interactions w/ Buffers"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"connection.on('data', (buffer) => {\n        const view = new DataView(data.buffer);\n        const type = view.getUint8(0); //0th is the packet type\n        const channelId = view.getUint16(1); //1th is the ChannelID - 1 to 256\n        const frameSize = view.getUint32(3); //3th is the FrameSize\n        const frameEnd = view.getUint8(7 + frameSize) //7th+FrameSize=FrameEnd\n\n        if(frameEnd !== 206){\n            //FrameEnd values should always be 206\n            throw new Error('Frame end invalid');\n        }\n\n        if(type === 1){ //If type is Method\n            const classId = view.getUint16(7);\n            const methodId = view.getUint16(7 + 2);\n            //If classId is 10(Connection) and methodId is 10(Start)\n            //it means we received a Connection#Start RPC\n            if(classId === 10 && methodId === 10){\n                console.log(`We are ready to reply with Connection#StartOk`);\n            }\n        }\n})\n")))}h.isMDXComponent=!0}}]);