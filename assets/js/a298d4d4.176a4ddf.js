"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9656],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>f});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},m=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),c=p(n),d=i,f=c["".concat(l,".").concat(d)]||c[d]||u[d]||a;return n?r.createElement(f,s(s({ref:t},m),{},{components:n})):r.createElement(f,s({ref:t},m))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,s=new Array(a);s[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[c]="string"==typeof e?e:i,s[1]=o;for(var p=2;p<a;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6364:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>p});var r=n(87462),i=(n(67294),n(3905));const a={book:"Designing Data-Intensive Applications: The Big Ideas Behind Reliable, Scalable, and Maintainable Systems - Martin Kleppman",tags:["lamporttimestamp","lamport","timestamps"]},s=void 0,o={unversionedId:"learn-in-public/Engineering/Distributed Systems/Lamport Timestamps",id:"learn-in-public/Engineering/Distributed Systems/Lamport Timestamps",title:"Lamport Timestamps",description:"Lamport Timestamps is a pattern used in Distributed Systems to achieve sort of an sequential ordering for a certain set of events. By using Timestamps are source of truth we can, at least ensure that the order which operations were applied are ordered.",source:"@site/docs/learn-in-public/1. Engineering/Distributed Systems/Lamport Timestamps.md",sourceDirName:"learn-in-public/1. Engineering/Distributed Systems",slug:"/learn-in-public/Engineering/Distributed Systems/Lamport Timestamps",permalink:"/docs/learn-in-public/Engineering/Distributed Systems/Lamport Timestamps",draft:!1,tags:[{label:"lamporttimestamp",permalink:"/docs/tags/lamporttimestamp"},{label:"lamport",permalink:"/docs/tags/lamport"},{label:"timestamps",permalink:"/docs/tags/timestamps"}],version:"current",frontMatter:{book:"Designing Data-Intensive Applications: The Big Ideas Behind Reliable, Scalable, and Maintainable Systems - Martin Kleppman",tags:["lamporttimestamp","lamport","timestamps"]},sidebar:"learn-in-public",previous:{title:"Distributed Computing",permalink:"/docs/learn-in-public/Engineering/Distributed Systems/Distributed Computing"},next:{title:"Linearizability",permalink:"/docs/learn-in-public/Engineering/Distributed Systems/Linearizability"}},l={},p=[{value:"Algorithm",id:"algorithm",level:3},{value:"Careful",id:"careful",level:3},{value:"Notes",id:"notes",level:3}],m={toc:p},c="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Lamport Timestamps is a pattern used in Distributed Systems to achieve sort of an ",(0,i.kt)("inlineCode",{parentName:"p"},"sequential")," ordering for a certain set of events. By using Timestamps are source of truth we can, at least ensure that the order which operations were applied are ordered.\nIt falls within the so-called ",(0,i.kt)("inlineCode",{parentName:"p"},"Sequencer Number Ordering")," - since this is a monotonically increasing value.\nThe difference between some common ",(0,i.kt)("inlineCode",{parentName:"p"},"sequence number generator")," AKA some incremental number from ",(0,i.kt)("inlineCode",{parentName:"p"},"Lamport Timestamps")," is the fact that we can use Lamport in distributed models like ",(0,i.kt)("inlineCode",{parentName:"p"},"Leaderless")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Multi-Leader")," topologies. Lamport Timestamp can achieve ",(0,i.kt)("inlineCode",{parentName:"p"},"causality")," differently from other algorithms."),(0,i.kt)("h3",{id:"algorithm"},"Algorithm"),(0,i.kt)("p",null,"For a set of servers, each one should have it's own node-id and count each operation in a monotonically increasing value. Yes, two servers can have the same counter but will differ by ",(0,i.kt)("inlineCode",{parentName:"p"},"node-id"),"\nWhenever a node receives a request, the counter value is always passed through. If receiving peer value is lower, it gets updated with this new value.\nThis way, whenever services have causal dependencies - at communication time they update their peer's with the latest value ensuring an ",(0,i.kt)("inlineCode",{parentName:"p"},"causality")," between ",(0,i.kt)("inlineCode",{parentName:"p"},"counter")," values."),(0,i.kt)("h3",{id:"careful"},"Careful"),(0,i.kt)("p",null,"Lamport Timestamp implementations/use-case can be easily mistaken by Version Vectors - which have different purposes.\nVersion Vectors are meant to decide wether two operations are concurrent or if it has any sort of causality dependency.\nLamport Timestamps ",(0,i.kt)("inlineCode",{parentName:"p"},"enforce")," the ordering of events."),(0,i.kt)("h3",{id:"notes"},"Notes"),(0,i.kt)("p",null,"It might not seem so interesting at first but on asynchronous environments - like Messaging Systems - having some sort of causality to depend on can really help out.\nSome queues may lag behind and cause weird behavior - Lamport Timestamps can help with that."))}u.isMDXComponent=!0}}]);