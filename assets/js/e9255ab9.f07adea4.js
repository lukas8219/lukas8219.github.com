"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1409],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>g});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(r),f=a,g=p["".concat(s,".").concat(f)]||p[f]||d[f]||o;return r?n.createElement(g,i(i({ref:t},u),{},{components:r})):n.createElement(g,i({ref:t},u))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},64776:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var n=r(87462),a=(r(67294),r(3905));const o={book:"Database Internals: A Deep Dive into How Distributed Data Systems Work - Alex Petrov"},i=void 0,l={unversionedId:"learn-in-public/Engineering/Database Internals/Chapter 7. Log Structured Storage",id:"learn-in-public/Engineering/Database Internals/Chapter 7. Log Structured Storage",title:"Chapter 7. Log Structured Storage",description:"Brief",source:"@site/docs/learn-in-public/1. Engineering/Database Internals/Chapter 7. Log Structured Storage.md",sourceDirName:"learn-in-public/1. Engineering/Database Internals",slug:"/learn-in-public/Engineering/Database Internals/Chapter 7. Log Structured Storage",permalink:"/docs/learn-in-public/Engineering/Database Internals/Chapter 7. Log Structured Storage",draft:!1,tags:[],version:"current",frontMatter:{book:"Database Internals: A Deep Dive into How Distributed Data Systems Work - Alex Petrov"},sidebar:"learn-in-public",previous:{title:"Chapter 6. B-Tree Variants",permalink:"/docs/learn-in-public/Engineering/Database Internals/Chapter 6. B-Tree Variants"},next:{title:"Bloom FIlters",permalink:"/docs/learn-in-public/Engineering/Distributed Systems/Bloom Filters"}},s={},c=[{value:"Brief",id:"brief",level:4}],u={toc:c},p="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(p,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h4",{id:"brief"},"Brief"),(0,a.kt)("p",null,"LSM Storages are focused on write-heavy workloads given that, very briefly, it's all all about appending values and merging then some point in the future.\nOpposite to B-Tree where we need to locate the node, either from disk or cache, and update in place. We only append values, making it much more faster.\nRead workloads are much slower in LSM dues to the needs of aggregating values."),(0,a.kt)("p",null,"On a hardware POV, B-Tree as costly because due to N sorts of SMO's (Structure Modification Operations) on writes/reads, alot of the IO is random. LSM are sequential by design."))}d.isMDXComponent=!0}}]);