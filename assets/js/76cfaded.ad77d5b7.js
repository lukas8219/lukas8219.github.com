"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2648],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>b});var i=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=i.createContext({}),p=function(e){var t=i.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=p(e.components);return i.createElement(o.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,b=u["".concat(o,".").concat(m)]||u[m]||c[m]||r;return n?i.createElement(b,l(l({ref:t},d),{},{components:n})):i.createElement(b,l({ref:t},d))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=m;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[u]="string"==typeof e?e:a,l[1]=s;for(var p=2;p<r;p++)l[p]=n[p];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2606:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var i=n(87462),a=(n(67294),n(3905));const r={book:"Designing Data-Intensive Applications: The Big Ideas Behind Reliable, Scalable, and Maintainable Systems - Martin Kleppman",tags:["linearizability","distributedmodels","distributedsystems"],title:"Linearizability"},l=void 0,s={unversionedId:"learn-in-public/Engineering/Distributed Systems/Linearizability",id:"learn-in-public/Engineering/Distributed Systems/Linearizability",title:"Linearizability",description:"Its the idea of appearing like there's only a single node while still having multiple replicas. And all operations looking like they are atomic.",source:"@site/docs/learn-in-public/1. Engineering/Distributed Systems/Linearizability.md",sourceDirName:"learn-in-public/1. Engineering/Distributed Systems",slug:"/learn-in-public/Engineering/Distributed Systems/Linearizability",permalink:"/docs/learn-in-public/Engineering/Distributed Systems/Linearizability",draft:!1,tags:[{label:"linearizability",permalink:"/docs/tags/linearizability"},{label:"distributedmodels",permalink:"/docs/tags/distributedmodels"},{label:"distributedsystems",permalink:"/docs/tags/distributedsystems"}],version:"current",frontMatter:{book:"Designing Data-Intensive Applications: The Big Ideas Behind Reliable, Scalable, and Maintainable Systems - Martin Kleppman",tags:["linearizability","distributedmodels","distributedsystems"],title:"Linearizability"},sidebar:"learn-in-public",previous:{title:"Lamport Timestamps",permalink:"/docs/learn-in-public/Engineering/Distributed Systems/Lamport Timestamps"},next:{title:"MapReduce",permalink:"/docs/learn-in-public/Engineering/Distributed Systems/MapReduce"}},o={},p=[{value:"<em>How to implement it on your system?</em>",id:"how-to-implement-it-on-your-system",level:4}],d={toc:p},u="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Its the idea of appearing like there's only a single node while still having multiple replicas. And all operations looking like they are atomic.\nWhenever a write is done, all clients reading the service, as example a database, should be able to see the recent change immediately."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Linearizability")," and ",(0,a.kt)("strong",{parentName:"p"},"Serializability")," differ, because serializability is about sequential execution of concurrent transactions.\n",(0,a.kt)("strong",{parentName:"p"},"Linearizability")," is just the idea of having a recency-guarantee when reading data;"),(0,a.kt)("p",null,"Linearizability is kinda important for locking and leader election, e.g, when all nodes startup we need to ensure they are electing a single leader and not causing split-brain, or a unique constraint on a database."),(0,a.kt)("h4",{id:"how-to-implement-it-on-your-system"},(0,a.kt)("em",{parentName:"h4"},"How to implement it on your system?")),(0,a.kt)("p",null,"What kind of Distributions Models are linearizable?"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Strategy"),(0,a.kt)("th",{parentName:"tr",align:null},"Works?"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Single Leader Replication"),(0,a.kt)("td",{parentName:"tr",align:null},"Potentially")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Consensus Algorithm"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes!")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Multi-Leader"),(0,a.kt)("td",{parentName:"tr",align:null},"Nope")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Leaderless"),(0,a.kt)("td",{parentName:"tr",align:null},"Almost certainly not")))),(0,a.kt)("p",null,"For leaderless, as example DynamoDB, theres a claim that with a quorum-reads and writes(w + r > N), we can reach a linearizable system, which is not exactly true - Only if you sacrifice performance requiring reads and writes to read the last state.\n",(0,a.kt)("strong",{parentName:"p"},"Last-Write-Wins")," from Cassandra, fall into ",(0,a.kt)("a",{parentName:"p",href:"/docs/learn-in-public/Engineering/Distributed%20Systems/Clock%20Issues%20and%20Clock%20Skew"},"Clock Issues and Clock Skew")," and are almost certainly non linearizable."),(0,a.kt)("p",null,"Single Leader is only linearizable on a single datacenter deployment. Might not be solution for all, since with multi datacenters, it loses linearizability on networks failures. It is a know problem and consequence of Single or Multi-Leader with multiple datacenters deployment."))}c.isMDXComponent=!0}}]);