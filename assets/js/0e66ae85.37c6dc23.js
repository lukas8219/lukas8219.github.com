"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2637],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=u(n),m=i,h=c["".concat(l,".").concat(m)]||c[m]||b[m]||a;return n?r.createElement(h,o(o({ref:t},p),{},{components:n})):r.createElement(h,o({ref:t},p))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:i,o[1]=s;for(var u=2;u<a;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7742:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>b,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var r=n(7462),i=(n(7294),n(3905));const a={},o=void 0,s={unversionedId:"learn-in-public/Engineering/RabbitMQ/PubSub & RabbitMQ What is the long-term price of not following a pattern",id:"learn-in-public/Engineering/RabbitMQ/PubSub & RabbitMQ What is the long-term price of not following a pattern",title:"PubSub & RabbitMQ What is the long-term price of not following a pattern",description:"The publisher/subscriber pattern describes the pattern that decouples the publisher side from the subscriber - ie publisher is not aware of the subscribers.",source:"@site/docs/learn-in-public/1. Engineering/RabbitMQ/PubSub & RabbitMQ What is the long-term price of not following a pattern.md",sourceDirName:"learn-in-public/1. Engineering/RabbitMQ",slug:"/learn-in-public/Engineering/RabbitMQ/PubSub & RabbitMQ What is the long-term price of not following a pattern",permalink:"/docs/learn-in-public/Engineering/RabbitMQ/PubSub & RabbitMQ What is the long-term price of not following a pattern",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"learn-in-public",previous:{title:"How to build RabbitMQ locally",permalink:"/docs/learn-in-public/Engineering/RabbitMQ/How to build RabbitMQ locally"},next:{title:"RabbitMQ - Disk Persistence",permalink:"/docs/learn-in-public/Engineering/RabbitMQ/RabbitMQ - Disk Persistence"}},l={},u=[{value:"So what does it mean in storage?",id:"so-what-does-it-mean-in-storage",level:3}],p={toc:u},c="wrapper";function b(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The publisher/subscriber pattern describes the pattern that decouples the publisher side from the subscriber - ie publisher is not aware of the subscribers.\nBut, what happens if we invert this? The publishers knows the subscriptions ahead of time and publishes them directly."),(0,i.kt)("p",null,"In a small scale, it is hard to feel any issue going on - in fact it is not until a medium scale is achieved."),(0,i.kt)("p",null,"Lets use RabbitMQ as example. How do we invert the routing?"),(0,i.kt)("p",null,"We take a ",(0,i.kt)("inlineCode",{parentName:"p"},"Direct")," exchange and publish 1 message for each interested subscriber - being a subscriber a certain queue."),(0,i.kt)("p",null,"In this case, for a certain event, we publish the same message 20 times to different queues."),(0,i.kt)("p",null,"Per second, we are receiving 50 events."),(0,i.kt)("p",null,"50 * 20 = 1000 messages per second."),(0,i.kt)("p",null,"Each message contains ~4kb ie 4MB per second being published per second + 4MB being consumed. Total 8Mb being transferred."),(0,i.kt)("h3",{id:"so-what-does-it-mean-in-storage"},"So what does it mean in storage?"),(0,i.kt)("p",null,"The PubSub pattern is a async communication pattern that requires the publishers to be unaware of the subscribers - we publish into a middleware and let it route."),(0,i.kt)("p",null,"Guess what? Lets invert it"),(0,i.kt)("p",null,"Instead of publishing to a exchange and routing it, lets publish 1 messages, into 10 queues - ie 10 messages. 10 publishes."),(0,i.kt)("p",null,"All the optimizations that RabbitMQ teams has engineered is thrown away. We start publishing messages one by one, creating a lot of copies in the disk - since we are not routing to a lot of queues, we are publishing one by one - the Broker cannot optimize the message storage usage - ie keeping the one copy in disk and letting the queues reference it - we then consume 10x more disk space and potentially memory."),(0,i.kt)("p",null,"Direct exchange vs Exchange routing "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Performance degradation",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Publisher confirms"),(0,i.kt)("li",{parentName:"ul"},"Takes longer to publish 10 direct vs 10 fanout"))),(0,i.kt)("li",{parentName:"ul"},"Disk optimizations",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Much more Disk IO happening"),(0,i.kt)("li",{parentName:"ul"},"when node fails, queue index build takes longe"),(0,i.kt)("li",{parentName:"ul"},"higher down time"))),(0,i.kt)("li",{parentName:"ul"},"network IO's",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"We pay for each network IO - publish and consume"))),(0,i.kt)("li",{parentName:"ul"},"memory resource economy",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"in a simple manner, even to receive packets, we are receiving way more than the needed.")))))}b.isMDXComponent=!0}}]);