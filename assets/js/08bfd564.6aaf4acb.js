"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8343],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(n),m=a,h=u["".concat(c,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(h,o(o({ref:t},p),{},{components:n})):r.createElement(h,o({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9964:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const i={title:"NodeJS Lazy Initialization",authors:"lukas8219",tags:["nodejs","lazyinitialization"]},o=void 0,s={permalink:"/blog/2024/06/01/Post3",source:"@site/blog/2024-06-01/Post3.md",title:"NodeJS Lazy Initialization",description:"One of the main challenges when dealing w/ the async nature of NodeJS is initializing classes/clients that requires some sort of side effect - such as database connection, disk reads or whatsoever. Even the simple idea of waiting for the first use-case to connect/initialize a resource.",date:"2024-06-01T00:00:00.000Z",formattedDate:"June 1, 2024",tags:[{label:"nodejs",permalink:"/blog/tags/nodejs"},{label:"lazyinitialization",permalink:"/blog/tags/lazyinitialization"}],readingTime:1.88,hasTruncateMarker:!1,authors:[{name:"Lucas Weis Polesello",title:"SRE | Senior Software Engineer @ LumaHealth",url:"https://github.com/lukas8219",email:"lucas.polesello@lwpsoftwares.com | lucas.c4d@gmail.com",imageURL:"https://github.com/lukas8219.png",key:"lukas8219"}],frontMatter:{title:"NodeJS Lazy Initialization",authors:"lukas8219",tags:["nodejs","lazyinitialization"]},prevItem:{title:"Redis is more than a Cache-n1 - Delaying Jobs",permalink:"/blog/2024/06/01/Post2"},nextItem:{title:"Redis is more than a Cache 2 -> Reference Data",permalink:"/blog/2024/06/01/Post4"}},c={authorsImageUrls:[void 0]},l=[],p={toc:l},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"One of the main challenges when dealing w/ the async nature of NodeJS is initializing classes/clients that requires some sort of side effect - such as database connection, disk reads or whatsoever. Even the simple idea of waiting for the first use-case to connect/initialize a resource."),(0,a.kt)("p",null,"Besides Dependency Injection - I like to use two approaches for this:"),(0,a.kt)("p",null,"1) Leaving it up to the client to call ",(0,a.kt)("inlineCode",{parentName:"p"},"connect")," or any other synonym - easy as creating an ",(0,a.kt)("inlineCode",{parentName:"p"},"async function")," as the example below"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const redis = require('redis');\nconst crypto = require('crypto');\n//PROS: Damn easy, simple and straight-forward\n\n//CONS: This leaves the entire responsibility to the client\nclass DistributedDataStructure {\n    constructor(){\n        this.client = redis.createClient();\n    }\n\n    async connect(){\n        return this.client.connect();\n    }\n\n    async add(staffName, reviewId){\n        //Do some business here - idk,\n        const accountName = await this.client.get(key);\n        return this.client.sAdd(`v1:${accountName}:pending-reviews`, reviewId);\n    }\n}\n\n(async () => {\n    const ds = new DistributedDataStructure();\n    await ds.connect();\n    ds.add('Jerome', crypto.randomBytes(12).toString('hex'));\n})()\n")),(0,a.kt)("p",null,"2) Proxying the access"),(0,a.kt)("p",null,"In the real and wild-world we know that we have to deal w/ legacy code, legacy initialization methods and much more unexpected stuff - for this we have a second use-case which leverages the (",(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy%5D)%5BProxy"},"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy])[Proxy")," API for JS]"),(0,a.kt)("p",null,"Using Proxy it would look poorly-like"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const redis = require('redis');\nconst { once } = require('events');\nconst crypto = require('crypto');\n\n//PROS: No client responsibility - makes it easy for the client\n//CONS: More complex and error prone\nclass ProxiedDistributedDataStructure {\n    constructor(){\n        this.client = redis.createClient();\n        this.client.connect();\n        return new Proxy(this, {\n            get(target, property){\n                const descriptor = target[property];\n                if(!descriptor){\n                    return;\n                }\n                if(target.isReady){\n                    return descriptor;\n                }\n                return async function(){\n                    await once(target.client, 'ready');\n                    return descriptor.apply(target, arguments);\n                }\n            }\n        });\n    }\n\n    async add(staffName, reviewId){\n        //Do some business here - idk - like below\n        const accountName = await this.client.get(staffName);\n        return this.client.sAdd(`v1:${accountName}:pending-reviews`, reviewId);\n    }\n}\n\nconst client = new ProxiedDistributedDataStructure();\nclient.add('Jerome', crypto.randomBytes(12).toString('hex'));\n")),(0,a.kt)("p",null,"The main benefit for the second approach is that we can instantiate the objects in ",(0,a.kt)("inlineCode",{parentName:"p"},"sync")," contexts and only treat the method calls as ",(0,a.kt)("inlineCode",{parentName:"p"},"async"),"  -  instead of needing to play around some dirty gimmicks to call ",(0,a.kt)("inlineCode",{parentName:"p"},"connect")," and chain promises - even worse, callbackifying."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"NOTES"),": AFAIC from Redis V3^ we have an option ",(0,a.kt)("inlineCode",{parentName:"p"},"legacyMode")," whenever creating the client which we can keep this lazy nature of Redis - doing client buffering of calls."))}d.isMDXComponent=!0}}]);