"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5869],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(n),m=r,f=d["".concat(c,".").concat(m)]||d[m]||u[m]||i;return n?a.createElement(f,o(o({ref:t},p),{},{components:n})):a.createElement(f,o({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[d]="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},34272:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var a=n(87462),r=(n(67294),n(3905));const i={title:"NodeJS 101 -  Lazy Initialization",authors:"lukas8219",tags:["nodejs","lazyinitialization","nodejs101","node"]},o=void 0,s={permalink:"/blog/2023/12/24/nodejs-101-lazy-init",source:"@site/blog/2023-12-24/nodejs-101-lazy-init.md",title:"NodeJS 101 -  Lazy Initialization",description:"One of the main challenges when dealing w/ the async nature of NodeJS is initializing classes/clients that requires some sort of side effect - such as database connection, disk reads or whatsoever. Even the simple idea of waiting for the first use-case to connect/initialize a resource.",date:"2023-12-24T00:00:00.000Z",formattedDate:"December 24, 2023",tags:[{label:"nodejs",permalink:"/blog/tags/nodejs"},{label:"lazyinitialization",permalink:"/blog/tags/lazyinitialization"},{label:"nodejs101",permalink:"/blog/tags/nodejs-101"},{label:"node",permalink:"/blog/tags/node"}],readingTime:1.88,hasTruncateMarker:!1,authors:[{name:"Lucas Weis Polesello",title:"SRE | Senior Software Engineer @ LumaHealth",url:"https://github.com/lukas8219",email:"lucas.polesello@lwpsoftwares.com | lucas.c4d@gmail.com",socials:{x:"https://x.com/luucaspole"},imageURL:"https://github.com/lukas8219.png",key:"lukas8219"}],frontMatter:{title:"NodeJS 101 -  Lazy Initialization",authors:"lukas8219",tags:["nodejs","lazyinitialization","nodejs101","node"]},prevItem:{title:"The Zalgo Effect and Resource Leakage - A Case",permalink:"/blog/2024/03/15/zalgo-effect-resource-leakage"}},c={authorsImageUrls:[void 0]},l=[],p={toc:l},d="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"One of the main challenges when dealing w/ the async nature of NodeJS is initializing classes/clients that requires some sort of side effect - such as database connection, disk reads or whatsoever. Even the simple idea of waiting for the first use-case to connect/initialize a resource."),(0,r.kt)("p",null,"Besides Dependency Injection - I like to use two approaches for this:"),(0,r.kt)("p",null,"1) Leaving it up to the client to call ",(0,r.kt)("inlineCode",{parentName:"p"},"connect")," or any other synonym - easy as creating an ",(0,r.kt)("inlineCode",{parentName:"p"},"async function")," as the example below"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const redis = require('redis');\nconst crypto = require('crypto');\n//PROS: Damn easy, simple and straight-forward\n\n//CONS: This leaves the entire responsibility to the client\nclass DistributedDataStructure {\n    constructor(){\n        this.client = redis.createClient();\n    }\n\n    async connect(){\n        return this.client.connect();\n    }\n\n    async add(staffName, reviewId){\n        //Do some business here - idk,\n        const accountName = await this.client.get(key);\n        return this.client.sAdd(`v1:${accountName}:pending-reviews`, reviewId);\n    }\n}\n\n(async () => {\n    const ds = new DistributedDataStructure();\n    await ds.connect();\n    ds.add('Jerome', crypto.randomBytes(12).toString('hex'));\n})()\n")),(0,r.kt)("p",null,"2) Proxying the access"),(0,r.kt)("p",null,"In the real and wild-world we know that we have to deal w/ legacy code, legacy initialization methods and much more unexpected stuff - for this we have a second use-case which leverages the (",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy%5D)%5BProxy"},"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy])[Proxy")," API for JS]"),(0,r.kt)("p",null,"Using Proxy it would look poorly-like"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const redis = require('redis');\nconst { once } = require('events');\nconst crypto = require('crypto');\n\n//PROS: No client responsibility - makes it easy for the client\n//CONS: More complex and error prone\nclass ProxiedDistributedDataStructure {\n    constructor(){\n        this.client = redis.createClient();\n        this.client.connect();\n        return new Proxy(this, {\n            get(target, property){\n                const descriptor = target[property];\n                if(!descriptor){\n                    return;\n                }\n                if(target.isReady){\n                    return descriptor;\n                }\n                return async function(){\n                    await once(target.client, 'ready');\n                    return descriptor.apply(target, arguments);\n                }\n            }\n        });\n    }\n\n    async add(staffName, reviewId){\n        //Do some business here - idk - like below\n        const accountName = await this.client.get(staffName);\n        return this.client.sAdd(`v1:${accountName}:pending-reviews`, reviewId);\n    }\n}\n\nconst client = new ProxiedDistributedDataStructure();\nclient.add('Jerome', crypto.randomBytes(12).toString('hex'));\n")),(0,r.kt)("p",null,"The main benefit for the second approach is that we can instantiate the objects in ",(0,r.kt)("inlineCode",{parentName:"p"},"sync")," contexts and only treat the method calls as ",(0,r.kt)("inlineCode",{parentName:"p"},"async"),"  -  instead of needing to play around some dirty gimmicks to call ",(0,r.kt)("inlineCode",{parentName:"p"},"connect")," and chain promises - even worse, callbackifying."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"NOTES"),": AFAIC from Redis V3^ we have an option ",(0,r.kt)("inlineCode",{parentName:"p"},"legacyMode")," whenever creating the client which we can keep this lazy nature of Redis - doing client buffering of calls."))}u.isMDXComponent=!0}}]);