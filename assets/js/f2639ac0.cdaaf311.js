"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4610],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>k});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),c=p(n),d=i,k=c["".concat(s,".").concat(d)]||c[d]||u[d]||l;return n?a.createElement(k,r(r({ref:t},m),{},{components:n})):a.createElement(k,r({ref:t},m))}));function k(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,r=new Array(l);r[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:i,r[1]=o;for(var p=2;p<l;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},84933:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var a=n(87462),i=(n(67294),n(3905));const l={tags:["exercises","cpu","computers","challenges"]},r=void 0,o={unversionedId:"learn-in-public/Engineering/Infrastructure/CPU Challenges",id:"learn-in-public/Engineering/Infrastructure/CPU Challenges",title:"CPU Challenges",description:"Study Roadmap for CPU in Linux",source:"@site/docs/learn-in-public/1. Engineering/Infrastructure/CPU Challenges.md",sourceDirName:"learn-in-public/1. Engineering/Infrastructure",slug:"/learn-in-public/Engineering/Infrastructure/CPU Challenges",permalink:"/docs/learn-in-public/Engineering/Infrastructure/CPU Challenges",draft:!1,tags:[{label:"exercises",permalink:"/docs/tags/exercises"},{label:"cpu",permalink:"/docs/tags/cpu"},{label:"computers",permalink:"/docs/tags/computers"},{label:"challenges",permalink:"/docs/tags/challenges"}],version:"current",frontMatter:{tags:["exercises","cpu","computers","challenges"]},sidebar:"learn-in-public",previous:{title:"GVM",permalink:"/docs/learn-in-public/Engineering/Go/GVM"},next:{title:"Chaos Engineering",permalink:"/docs/learn-in-public/Engineering/Infrastructure/Chaos Engineering"}},s={},p=[{value:"Study Roadmap for CPU in Linux",id:"study-roadmap-for-cpu-in-linux",level:3},{value:"Exercise 1: Monitor Basic CPU Usage",id:"exercise-1-monitor-basic-cpu-usage",level:4},{value:"Notes:",id:"notes",level:5},{value:"Exercise 2: Analyze Process CPU Usage",id:"exercise-2-analyze-process-cpu-usage",level:4},{value:"Notes:",id:"notes-1",level:4},{value:"Exercise 3: Measure CPU Performance with <code>mpstat</code>",id:"exercise-3-measure-cpu-performance-with-mpstat",level:4},{value:"Note",id:"note",level:4},{value:"Exercise 4: Perform CPU Stress Testing",id:"exercise-4-perform-cpu-stress-testing",level:4},{value:"Exercise 5: Analyze CPU Scheduling with <code>perf</code>",id:"exercise-5-analyze-cpu-scheduling-with-perf",level:4},{value:"Notes:",id:"notes-2",level:4},{value:"Exercise 6: Investigate Context Switching",id:"exercise-6-investigate-context-switching",level:4},{value:"Exercise 7: Examine CPU Core Affinity",id:"exercise-7-examine-cpu-core-affinity",level:4},{value:"Exercise 8: Investigate CPU Thermal Throttling",id:"exercise-8-investigate-cpu-thermal-throttling",level:4},{value:"Exercise 9: Analyze CPU Load Balancing",id:"exercise-9-analyze-cpu-load-balancing",level:4},{value:"Exercise 10: Long-term CPU Monitoring and Reporting",id:"exercise-10-long-term-cpu-monitoring-and-reporting",level:4},{value:"Final Thoughts",id:"final-thoughts",level:3},{value:"Challenge 1: Analyze Multi-threaded Performance",id:"challenge-1-analyze-multi-threaded-performance",level:4},{value:"Challenge 2: Investigate CPU Cache Effects",id:"challenge-2-investigate-cpu-cache-effects",level:4},{value:"Challenge 3: Measure Context Switch Overhead",id:"challenge-3-measure-context-switch-overhead",level:4},{value:"Challenge 4: Explore CPU Scheduling Algorithms",id:"challenge-4-explore-cpu-scheduling-algorithms",level:4},{value:"Challenge 5: Simulate CPU Contention",id:"challenge-5-simulate-cpu-contention",level:4},{value:"Challenge 6: Investigate Power Management",id:"challenge-6-investigate-power-management",level:4},{value:"Challenge 7: Explore Hyperthreading Effects",id:"challenge-7-explore-hyperthreading-effects",level:4},{value:"Challenge 8: Analyze CPU Resource Limits",id:"challenge-8-analyze-cpu-resource-limits",level:4},{value:"Challenge 9: Investigate Real-time Task Scheduling",id:"challenge-9-investigate-real-time-task-scheduling",level:4},{value:"Challenge 10: Profile Application Performance",id:"challenge-10-profile-application-performance",level:4}],m={toc:p},c="wrapper";function u(e){let{components:t,...l}=e;return(0,i.kt)(c,(0,a.Z)({},m,l,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h3",{id:"study-roadmap-for-cpu-in-linux"},"Study Roadmap for CPU in Linux"),(0,i.kt)("h4",{id:"exercise-1-monitor-basic-cpu-usage"},"Exercise 1: Monitor Basic CPU Usage"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Objective"),": Get a baseline of your system's CPU performance."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Tools"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"top"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"htop")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Instructions"),":",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"Run ",(0,i.kt)("inlineCode",{parentName:"li"},"top")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"htop")," to monitor real-time CPU usage."),(0,i.kt)("li",{parentName:"ol"},"Observe the CPU usage per core and the load average."),(0,i.kt)("li",{parentName:"ol"},"Record metrics over a period of time and identify any trends.")))),(0,i.kt)("h5",{id:"notes"},"Notes:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Running ",(0,i.kt)("inlineCode",{parentName:"li"},"top")," gives us some interesting information")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"Tasks: 132 total,   1 running, 131 sleeping,   0 stopped,   0 zombie\n%Cpu(s):  1.5 us,  3.0 sy,  0.0 ni, 95.5 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st\nMiB Mem :   3910.6 total,   1062.8 free,    334.9 used,   2512.9 buff/cache\nMiB Swap:      0.0 total,      0.0 free,      0.0 used.   3383.7 avail Mem\n")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"The total amount of processes in the machine - and even separated by status"),(0,i.kt)("li",{parentName:"ol"},"The CPU % usage spliited by `user, system, ni(user defined priorities),idle %, waiting-time (for IO), hi (time for hardware handling CPU time), si (code calling interruption), st (stolen machine - involuntary wait due to hypervisors)"),(0,i.kt)("li",{parentName:"ol"},"Memory and Swap Memory.\nReference: ",(0,i.kt)("a",{parentName:"li",href:"https://unix.stackexchange.com/questions/18918/linux-top-command-what-are-us-sy-ni-id-wa-hi-si-and-st-for-cpu-usage"},"https://unix.stackexchange.com/questions/18918/linux-top-command-what-are-us-sy-ni-id-wa-hi-si-and-st-for-cpu-usage"))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Running ",(0,i.kt)("inlineCode",{parentName:"li"},"htop")," gives us almost the same inputs but with better visibility\n",(0,i.kt)("img",{alt:"top-print",src:n(81326).Z,width:"2500",height:"511"}))),(0,i.kt)("hr",null),(0,i.kt)("h4",{id:"exercise-2-analyze-process-cpu-usage"},"Exercise 2: Analyze Process CPU Usage"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Objective"),": Understand which processes are consuming CPU resources."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Tools"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"ps"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"top")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Instructions"),":",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"Use ",(0,i.kt)("inlineCode",{parentName:"li"},"ps aux --sort=-%cpu")," to list processes sorted by CPU usage."),(0,i.kt)("li",{parentName:"ol"},"Identify the top CPU-consuming processes."),(0,i.kt)("li",{parentName:"ol"},"Use ",(0,i.kt)("inlineCode",{parentName:"li"},"top")," to see dynamic changes in CPU usage and how processes behave over time.")))),(0,i.kt)("h4",{id:"notes-1"},"Notes:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Running ",(0,i.kt)("inlineCode",{parentName:"li"},"ps")," has some cool utilities such as ",(0,i.kt)("inlineCode",{parentName:"li"},"--sort"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"We can sort for a bunch of parameters - like pid, name, user, %cpu and commad. All the headers form the raw command."),(0,i.kt)("li",{parentName:"ul"},"You can also list only processes for certain users using ",(0,i.kt)("inlineCode",{parentName:"li"},"ps aux -U <user_ids_by_comma>")),(0,i.kt)("li",{parentName:"ul"},"reference: ",(0,i.kt)("a",{parentName:"li",href:"https://www.oreilly.com/library/view/linux-shell-scripting/9781785881985/a82f2295-70b5-4bc9-a401-87df782ceafb.xhtml#:~:text=The%20%2Dsort%20parameter%20forces%20ps,%2C%2Bparameter2%2Cparameter3"},"https://www.oreilly.com/library/view/linux-shell-scripting/9781785881985/a82f2295-70b5-4bc9-a401-87df782ceafb.xhtml#:~:text=The%20%2Dsort%20parameter%20forces%20ps,%2C%2Bparameter2%2Cparameter3"),".."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ps aux")," is an BSD acronym to run with ",(0,i.kt)("inlineCode",{parentName:"li"},"a,u,x")," parameters",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"a")," is for all users"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"u"),"  detailed info"))),(0,i.kt)("li",{parentName:"ul"},"Given this you can run ",(0,i.kt)("inlineCode",{parentName:"li"},"ps -u <username or id> u")," to run all detailed info for only a certain user, apply ",(0,i.kt)("inlineCode",{parentName:"li"},"--sort")," and much more")),(0,i.kt)("hr",null),(0,i.kt)("h4",{id:"exercise-3-measure-cpu-performance-with-mpstat"},"Exercise 3: Measure CPU Performance with ",(0,i.kt)("inlineCode",{parentName:"h4"},"mpstat")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Objective"),": Get detailed CPU statistics over time."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Tools"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"mpstat")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Instructions"),":",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"Run ",(0,i.kt)("inlineCode",{parentName:"li"},"mpstat -P ALL 1")," to monitor CPU usage by each core."),(0,i.kt)("li",{parentName:"ol"},"Observe idle time, user time, and system time across different cores."),(0,i.kt)("li",{parentName:"ol"},"Analyze how CPU usage changes during different workloads.")))),(0,i.kt)("h4",{id:"note"},"Note"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Running ",(0,i.kt)("inlineCode",{parentName:"li"},"mpstat -P ALL 1")," lists CPU usage per core each 1s")),(0,i.kt)("hr",null),(0,i.kt)("h4",{id:"exercise-4-perform-cpu-stress-testing"},"Exercise 4: Perform CPU Stress Testing"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Objective"),": Simulate high CPU load and observe system behavior."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Tools"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"stress"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"stress-ng")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Instructions"),":",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"Use ",(0,i.kt)("inlineCode",{parentName:"li"},"stress --cpu 4 --timeout 30")," to create CPU load on 4 cores for 30 seconds."),(0,i.kt)("li",{parentName:"ol"},"Monitor the impact on system responsiveness and CPU metrics using ",(0,i.kt)("inlineCode",{parentName:"li"},"htop")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"top"),"."),(0,i.kt)("li",{parentName:"ol"},"Experiment with different numbers of CPU cores and durations.")))),(0,i.kt)("h4",{id:"exercise-5-analyze-cpu-scheduling-with-perf"},"Exercise 5: Analyze CPU Scheduling with ",(0,i.kt)("inlineCode",{parentName:"h4"},"perf")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Objective"),": Gain insights into scheduling events and CPU performance."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Tools"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"perf")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Instructions"),":",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"Run ",(0,i.kt)("inlineCode",{parentName:"li"},"perf top")," to see a real-time view of CPU usage by functions."),(0,i.kt)("li",{parentName:"ol"},"Run ",(0,i.kt)("inlineCode",{parentName:"li"},"perf record -a")," followed by a workload (e.g., a ",(0,i.kt)("inlineCode",{parentName:"li"},"stress")," test)."),(0,i.kt)("li",{parentName:"ol"},"Use ",(0,i.kt)("inlineCode",{parentName:"li"},"perf report")," to analyze which functions were consuming the most CPU cycles.")))),(0,i.kt)("h4",{id:"notes-2"},"Notes:"),(0,i.kt)("p",null,"Running ",(0,i.kt)("inlineCode",{parentName:"p"},"perf top")," gives us some cool insights into the usability. I've ran it while ",(0,i.kt)("inlineCode",{parentName:"p"},"stress-ng --cpu 1 --timeout 30")," was active.\nWhat we could learn from the input is:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"  64.40%  swapper          [kernel.kallsyms]         [k] default_idle_call\n   6.24%  stress-ng        libm.so.6                 [.] 0x0000000000053e78\n   5.90%  stress-ng        stress-ng                 [.] 0x0000000000122288\n   1.67%  stress-ng        stress-ng                 [.] 0x000000000012228c\n   1.62%  stress-ng        libm.so.6                 [.] __sqrtl_finite\n   1.42%  swapper          [kernel.kallsyms]         [k] __softirqentry_text_start\n   1.34%  stress-ng        libm.so.6                 [.] 0x0000000000053e7c\n   0.77%  sshfs            [kernel.kallsyms]         [k] __wake_up_common_lock\n   0.59%  perf             [kernel.kallsyms]         [k] __wake_up_common_lock\n   0.52%  swapper          [kernel.kallsyms]         [k] do_idle\n   0.47%  swapper          [kernel.kallsyms]         [k] cpuidle_idle_call\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"swapper")," process is responsible for making the CPU idle. In this case, 64% of the time CPU was idle.\nTo understand how much CPU % a process is using, we need to sum all the entries of it. For ",(0,i.kt)("inlineCode",{parentName:"p"},"stress-ng")," it is around ~15%.\nWe can notice that ",(0,i.kt)("inlineCode",{parentName:"p"},"libm.so.6")," is the main culprit of load - with an function call named ",(0,i.kt)("inlineCode",{parentName:"p"},"__sqrtl_finite"),". We are assuming this since we don't have enough info about the code."),(0,i.kt)("hr",null),(0,i.kt)("h4",{id:"exercise-6-investigate-context-switching"},"Exercise 6: Investigate Context Switching"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Objective"),": Understand how context switching affects CPU performance."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Tools"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"pidstat"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"vmstat")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Instructions"),":",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"Run ",(0,i.kt)("inlineCode",{parentName:"li"},"pidstat -w 1")," to monitor context switches for processes."),(0,i.kt)("li",{parentName:"ol"},"Use ",(0,i.kt)("inlineCode",{parentName:"li"},"vmstat 1")," to observe context switches at the system level."),(0,i.kt)("li",{parentName:"ol"},"Identify processes with high context switch rates and analyze their behavior.")))),(0,i.kt)("h4",{id:"exercise-7-examine-cpu-core-affinity"},"Exercise 7: Examine CPU Core Affinity"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Objective"),": Learn how CPU affinity affects performance."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Tools"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"taskset"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"htop")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Instructions"),":",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"Use ",(0,i.kt)("inlineCode",{parentName:"li"},"taskset")," to run a CPU-bound process on a specific core (e.g., ",(0,i.kt)("inlineCode",{parentName:"li"},"taskset -c 0 ./your_program"),")."),(0,i.kt)("li",{parentName:"ol"},"Monitor CPU usage in ",(0,i.kt)("inlineCode",{parentName:"li"},"htop")," to see how it behaves when pinned to a single core."),(0,i.kt)("li",{parentName:"ol"},"Experiment with different core affinities and observe performance changes.")))),(0,i.kt)("h4",{id:"exercise-8-investigate-cpu-thermal-throttling"},"Exercise 8: Investigate CPU Thermal Throttling"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Objective"),": Understand how thermal throttling affects CPU performance."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Tools"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"lm-sensors"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"cpufrequtils")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Instructions"),":",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"Install ",(0,i.kt)("inlineCode",{parentName:"li"},"lm-sensors")," and configure it to monitor CPU temperatures."),(0,i.kt)("li",{parentName:"ol"},"Run a stress test while monitoring temperature and CPU frequency."),(0,i.kt)("li",{parentName:"ol"},"Observe how high temperatures lead to throttling and impact performance.")))),(0,i.kt)("h4",{id:"exercise-9-analyze-cpu-load-balancing"},"Exercise 9: Analyze CPU Load Balancing"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Objective"),": Study how the Linux scheduler balances CPU loads."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Tools"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"sar"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"htop"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"dstat")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Instructions"),":",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"Use ",(0,i.kt)("inlineCode",{parentName:"li"},"sar -P ALL 1")," to monitor CPU usage across cores."),(0,i.kt)("li",{parentName:"ol"},"Run workloads that generate different levels of CPU usage."),(0,i.kt)("li",{parentName:"ol"},"Observe how the scheduler redistributes workloads among CPU cores.")))),(0,i.kt)("h4",{id:"exercise-10-long-term-cpu-monitoring-and-reporting"},"Exercise 10: Long-term CPU Monitoring and Reporting"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Objective"),": Set up a system to collect and analyze CPU statistics over time."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Tools"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"sar"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"sysstat")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Instructions"),":",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"Install ",(0,i.kt)("inlineCode",{parentName:"li"},"sysstat")," and enable data collection."),(0,i.kt)("li",{parentName:"ol"},"Use ",(0,i.kt)("inlineCode",{parentName:"li"},"sar -u 1")," to collect CPU usage statistics over time."),(0,i.kt)("li",{parentName:"ol"},"Analyze the collected data to identify trends, peak usage times, and potential bottlenecks.")))),(0,i.kt)("h3",{id:"final-thoughts"},"Final Thoughts"),(0,i.kt)("p",null,"Make sure to document your findings, observations, and any surprising results for each exercise. This structured approach will help you develop a comprehensive understanding of CPU performance and scheduling in Linux, allowing you to effectively analyze and optimize CPU-related issues in your system. Enjoy your studies!"),(0,i.kt)("h1",{id:"advanced-section"},"Advanced Section"),(0,i.kt)("h4",{id:"challenge-1-analyze-multi-threaded-performance"},"Challenge 1: Analyze Multi-threaded Performance"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Objective"),": Measure the performance impact of multi-threading on CPU utilization."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Instructions"),":",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"Create a multi-threaded application that performs heavy computations."),(0,i.kt)("li",{parentName:"ol"},"Use ",(0,i.kt)("inlineCode",{parentName:"li"},"perf")," to analyze CPU cycles, cache hits/misses, and context switches."),(0,i.kt)("li",{parentName:"ol"},"Compare the performance with a single-threaded version.")))),(0,i.kt)("h4",{id:"challenge-2-investigate-cpu-cache-effects"},"Challenge 2: Investigate CPU Cache Effects"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Objective"),": Understand how cache levels (L1, L2, L3) affect performance."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Instructions"),":",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"Write benchmarks to access data in different cache levels (e.g., large arrays)."),(0,i.kt)("li",{parentName:"ol"},"Use ",(0,i.kt)("inlineCode",{parentName:"li"},"perf")," to measure cache hits and misses."),(0,i.kt)("li",{parentName:"ol"},"Analyze how data locality impacts performance.")))),(0,i.kt)("h4",{id:"challenge-3-measure-context-switch-overhead"},"Challenge 3: Measure Context Switch Overhead"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Objective"),": Analyze the overhead of context switching on system performance."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Instructions"),":",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"Create a scenario with high context switching (many short-lived processes)."),(0,i.kt)("li",{parentName:"ol"},"Use ",(0,i.kt)("inlineCode",{parentName:"li"},"pidstat")," to measure context switches per second."),(0,i.kt)("li",{parentName:"ol"},"Compare CPU utilization with and without context switch-heavy workloads.")))),(0,i.kt)("h4",{id:"challenge-4-explore-cpu-scheduling-algorithms"},"Challenge 4: Explore CPU Scheduling Algorithms"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Objective"),": Compare different CPU scheduling algorithms (CFS, real-time)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Instructions"),":",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"Create workloads that require real-time processing."),(0,i.kt)("li",{parentName:"ol"},"Switch between scheduling policies using ",(0,i.kt)("inlineCode",{parentName:"li"},"chrt")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"nice"),"."),(0,i.kt)("li",{parentName:"ol"},"Measure performance impacts on latency and throughput.")))),(0,i.kt)("h4",{id:"challenge-5-simulate-cpu-contention"},"Challenge 5: Simulate CPU Contention"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Objective"),": Observe the effects of CPU contention on performance."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Instructions"),":",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"Run multiple CPU-intensive processes on the same CPU core."),(0,i.kt)("li",{parentName:"ol"},"Monitor CPU usage and process states with ",(0,i.kt)("inlineCode",{parentName:"li"},"top")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"htop"),"."),(0,i.kt)("li",{parentName:"ol"},"Analyze the impact of contention on overall system performance.")))),(0,i.kt)("h4",{id:"challenge-6-investigate-power-management"},"Challenge 6: Investigate Power Management"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Objective"),": Understand how CPU power management affects performance."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Instructions"),":",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"Use ",(0,i.kt)("inlineCode",{parentName:"li"},"cpupower")," to change CPU frequency scaling governors (performance, powersave)."),(0,i.kt)("li",{parentName:"ol"},"Measure performance under different governors using a CPU benchmark."),(0,i.kt)("li",{parentName:"ol"},"Analyze trade-offs between power savings and performance.")))),(0,i.kt)("h4",{id:"challenge-7-explore-hyperthreading-effects"},"Challenge 7: Explore Hyperthreading Effects"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Objective"),": Measure the impact of hyperthreading on CPU performance."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Instructions"),":",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"Enable/disable hyperthreading in your BIOS."),(0,i.kt)("li",{parentName:"ol"},"Run benchmarks on the same workload with hyperthreading on and off."),(0,i.kt)("li",{parentName:"ol"},"Compare CPU utilization and overall performance metrics.")))),(0,i.kt)("h4",{id:"challenge-8-analyze-cpu-resource-limits"},"Challenge 8: Analyze CPU Resource Limits"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Objective"),": Understand the impact of setting resource limits on CPU usage."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Instructions"),":",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"Use ",(0,i.kt)("inlineCode",{parentName:"li"},"ulimit")," to set CPU time limits for processes."),(0,i.kt)("li",{parentName:"ol"},"Run a CPU-intensive job and monitor its behavior as it hits limits."),(0,i.kt)("li",{parentName:"ol"},"Analyze how the system handles job termination and resource cleanup.")))),(0,i.kt)("h4",{id:"challenge-9-investigate-real-time-task-scheduling"},"Challenge 9: Investigate Real-time Task Scheduling"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Objective"),": Explore how real-time tasks interact with regular tasks."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Instructions"),":",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"Create a real-time task using ",(0,i.kt)("inlineCode",{parentName:"li"},"pthread")," and set its scheduling policy."),(0,i.kt)("li",{parentName:"ol"},"Run it alongside regular tasks and measure impact on responsiveness."),(0,i.kt)("li",{parentName:"ol"},"Analyze any priority inversion or scheduling anomalies.")))),(0,i.kt)("h4",{id:"challenge-10-profile-application-performance"},"Challenge 10: Profile Application Performance"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Objective"),": Use profiling to identify bottlenecks in CPU-bound applications."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Instructions"),":",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"Use ",(0,i.kt)("inlineCode",{parentName:"li"},"gprof")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"valgrind")," with ",(0,i.kt)("inlineCode",{parentName:"li"},"callgrind")," to profile an application."),(0,i.kt)("li",{parentName:"ol"},"Analyze the generated reports to find hotspots and optimize the code."),(0,i.kt)("li",{parentName:"ol"},"Measure performance improvements after optimizations.")))))}u.isMDXComponent=!0},81326:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/top-print-519e87c0578e266205935112b1967909.webp"}}]);