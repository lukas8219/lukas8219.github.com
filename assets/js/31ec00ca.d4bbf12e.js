"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6454],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=l(n),d=i,g=m["".concat(c,".").concat(d)]||m[d]||u[d]||a;return n?r.createElement(g,o(o({ref:t},p),{},{components:n})):r.createElement(g,o({ref:t},p))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[m]="string"==typeof e?e:i,o[1]=s;for(var l=2;l<a;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},55259:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=n(87462),i=(n(67294),n(3905));const a={book:"Designing Data-Intensive Applications: The Big Ideas Behind Reliable, Scalable, and Maintainable Systems - Martin Kleppman",tags:["versionvectors","totalorderingevents","orderingevents"]},o=void 0,s={unversionedId:"learn-in-public/Engineering/Distributed Systems/Version Vectors",id:"learn-in-public/Engineering/Distributed Systems/Version Vectors",title:"Version Vectors",description:"Version Vectors is a pattern used in Distributed Models/Systems to assert if some operation has any causality/ordering OR if it's concurrent.",source:"@site/docs/learn-in-public/1. Engineering/Distributed Systems/Version Vectors.md",sourceDirName:"learn-in-public/1. Engineering/Distributed Systems",slug:"/learn-in-public/Engineering/Distributed Systems/Version Vectors",permalink:"/docs/learn-in-public/Engineering/Distributed Systems/Version Vectors",draft:!1,tags:[{label:"versionvectors",permalink:"/docs/tags/versionvectors"},{label:"totalorderingevents",permalink:"/docs/tags/totalorderingevents"},{label:"orderingevents",permalink:"/docs/tags/orderingevents"}],version:"current",frontMatter:{book:"Designing Data-Intensive Applications: The Big Ideas Behind Reliable, Scalable, and Maintainable Systems - Martin Kleppman",tags:["versionvectors","totalorderingevents","orderingevents"]},sidebar:"learn-in-public",previous:{title:"Transactions - Isolation Levels",permalink:"/docs/learn-in-public/Engineering/Distributed Systems/Transactions - Isolation Levels"},next:{title:"GRPC and Protobuffers",permalink:"/docs/learn-in-public/Engineering/Go/GRPC and Protobuffers"}},c={},l=[{value:"Implementation",id:"implementation",level:3},{value:"Comparing with Lamport Timestamps",id:"comparing-with-lamport-timestamps",level:3}],p={toc:l},m="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(m,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Version Vectors")," is a pattern used in Distributed Models/Systems to assert if some operation has any causality/ordering OR if it's concurrent.\nBy keeping a counter of operations in each node, and updating them whenever nodes communicate, we can use their counter values to check if operations are concurrent (a = b) OR they have some causality. (a > b).\nThe same way as Lamport Timestamps, we use the max values of the peers whenever synchronizing."),(0,i.kt)("h3",{id:"implementation"},"Implementation"),(0,i.kt)("p",null,"Keep an Vector of integers for each process. Increment them at each operation.\nCompare the values to check if they are either concurrent (equal) or have any causality (by checking dominance - ",(0,i.kt)("inlineCode",{parentName:"p"},"less than")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"greater than"),")\n#versionvectors #vectors #version #distributedsystems "),(0,i.kt)("h3",{id:"comparing-with-lamport-timestamps"},"Comparing with Lamport Timestamps"),(0,i.kt)("p",null,"The key differences are that Version Vectors implement arrays/vectors of integers, to track multiple concurrent things happening where as Lamport Timestamps are global and ensure a total ordering of events.\nLamport cannot track concurrency since they are global values and is much more simpler than Version Vectors to implement.\nComplexity-wise Version Vectors are in disavantage as they need to track N processes (integers) and Lamport Timestamps are unique/global per node."))}u.isMDXComponent=!0}}]);