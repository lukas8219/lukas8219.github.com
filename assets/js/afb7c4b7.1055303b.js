"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[347],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>g});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(r),h=a,g=d["".concat(l,".").concat(h)]||d[h]||c[h]||i;return r?n.createElement(g,o(o({ref:t},u),{},{components:r})):n.createElement(g,o({ref:t},u))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},26117:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var n=r(87462),a=(r(67294),r(3905));const i={book:"Database Internals: A Deep Dive into How Distributed Data Systems Work - Alex Petrov"},o=void 0,s={unversionedId:"learn-in-public/Engineering/Database Internals/Chapter 6. B-Tree Variants",id:"learn-in-public/Engineering/Database Internals/Chapter 6. B-Tree Variants",title:"Chapter 6. B-Tree Variants",description:"Copy-on-Write",source:"@site/docs/learn-in-public/1. Engineering/Database Internals/Chapter 6. B-Tree Variants.md",sourceDirName:"learn-in-public/1. Engineering/Database Internals",slug:"/learn-in-public/Engineering/Database Internals/Chapter 6. B-Tree Variants",permalink:"/docs/learn-in-public/Engineering/Database Internals/Chapter 6. B-Tree Variants",draft:!1,tags:[],version:"current",frontMatter:{book:"Database Internals: A Deep Dive into How Distributed Data Systems Work - Alex Petrov"},sidebar:"learn-in-public",previous:{title:"B-Tree Basic",permalink:"/docs/learn-in-public/Engineering/Database Internals/B-Tree Basic"},next:{title:"Chapter 7. Log Structured Storage",permalink:"/docs/learn-in-public/Engineering/Database Internals/Chapter 7. Log Structured Storage"}},l={},p=[{value:"Copy-on-Write",id:"copy-on-write",level:4},{value:"Lazy B-Trees (WiredTiger/MongoDB)",id:"lazy-b-trees-wiredtigermongodb",level:4},{value:"Lazy Adaptative B-Tree",id:"lazy-adaptative-b-tree",level:4},{value:"Flash-Disk Tree ( FD-Tree)",id:"flash-disk-tree--fd-tree",level:4},{value:"BW Tree (Buzzword Tree)",id:"bw-tree-buzzword-tree",level:4},{value:"Cache Oblivious B-Tree",id:"cache-oblivious-b-tree",level:3}],u={toc:p},d="wrapper";function c(e){let{components:t,...r}=e;return(0,a.kt)(d,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h4",{id:"copy-on-write"},"Copy-on-Write"),(0,a.kt)("p",null,"It's an technique that consist of, whenever writing stuff, never mutating the input. Usually, we would copy and update it. When ",(0,a.kt)("inlineCode",{parentName:"p"},"copy-on-write")," is used for B-Trees, we would copy the entirety of the B-Tree and just keep references for those unaltered.\nDatabases like LMDB, one of the fastest K-V stores, uses for it's storage engine.\nIt is much less complex than usual approach since it doesn't need synchronization between buffers."),(0,a.kt)("h4",{id:"lazy-b-trees-wiredtigermongodb"},"Lazy B-Trees (WiredTiger/MongoDB)"),(0,a.kt)("p",null,"This concept consists of lazily writing page changes, buffering updates before flushing them to disk pages. Reads go through this ",(0,a.kt)("inlineCode",{parentName:"p"},"Update Buffer")," and whenever we flushing times kicks in, we just merge both update buffer with the in-memory cached data.\nThis buffering is handled by a different thread, not competing with read/write threads/operations."),(0,a.kt)("h4",{id:"lazy-adaptative-b-tree"},"Lazy Adaptative B-Tree"),(0,a.kt)("p",null,"This approach does the same Lazy B-Tree but to a group of nodes, named ",(0,a.kt)("inlineCode",{parentName:"p"},"subtree"),". Buffering updates to this subtrees and applying only on those."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"How does read operations happen in LA B-Trees? Seems to be expensive per BW-Tree.")),(0,a.kt)("h4",{id:"flash-disk-tree--fd-tree"},"Flash-Disk Tree ( FD-Tree)"),(0,a.kt)("p",null,"I honestly didn't grasp much about this Tree variant."),(0,a.kt)("h4",{id:"bw-tree-buzzword-tree"},"BW Tree (Buzzword Tree)"),(0,a.kt)("p",null,"Buzzword Tree make up for in-place updates by pre-prending Delta Nodes (changes like insert, etc) to the Base Nodes - using a LinkedList structure to link those nodes. The Base Node being the last node from the chain.\nNodes are now logical entities.\nDuring read, now we need to traverse the entire node LinkedList to construct the node final-state."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-text"},"This is somewhat similar to what LA-Trees do (see \u201cLazy-Adaptive Tree\u201d): keeping updates separate from the main structure and replaying them on read.\n\nPetrov, Alex. Database Internals (p. 192). O'Reilly Media. Edi\xe7\xe3o do Kindle. \n")),(0,a.kt)("p",null,"Examples of BWTrees"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/spacejam/sled"},"https://github.com/spacejam/sled")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/wangziqi2013/BwTree"},"https://github.com/wangziqi2013/BwTree"))),(0,a.kt)("h3",{id:"cache-oblivious-b-tree"},"Cache Oblivious B-Tree"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Not being used in production by any database"),(0,a.kt)("li",{parentName:"ul"},"No implementation outside of academic\nCreates a Two Level Memory model for all storage - enabling for platform specific configurations but creating something more general.")),(0,a.kt)("h1",{id:"take-away-points"},"Take Away Points:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"B-Trees are not perfect and have a lot of downsides"),(0,a.kt)("li",{parentName:"ul"},"Wired Tigers uses Lazy B-Trees")),(0,a.kt)("p",null,"Further reads"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Making DS persistent ",(0,a.kt)("a",{parentName:"li",href:"https://dx.doi.org/10.1016/0022-0000(89)90034-2"},"https://dx.doi.org/10.1016/0022-0000(89)90034-2"),"."),(0,a.kt)("li",{parentName:"ul"},'\u201cLazy-Adaptive Tree: an optimized index structure for flash devices" ',(0,a.kt)("a",{parentName:"li",href:"https://doi.org/10.14778/1687627.1687669"},"https://doi.org/10.14778/1687627.1687669"),"."),(0,a.kt)("li",{parentName:"ul"},'\u201cTree Indexing on Solid State Drives" ',(0,a.kt)("a",{parentName:"li",href:"https://doi.org/10.14778/1920841.1920990"},"https://doi.org/10.14778/1920841.1920990"),"."),(0,a.kt)("li",{parentName:"ul"},"\u201cBuilding a Bw-Tree Takes More Than Just Buzz Words.\u201d ",(0,a.kt)("a",{parentName:"li",href:"https://doi.org/10.1145/3183713.3196895"},"https://doi.org/10.1145/3183713.3196895")),(0,a.kt)("li",{parentName:"ul"},"\u201cThe Bw-Tree: A B-tree for new hardware platforms.\u201d ",(0,a.kt)("a",{parentName:"li",href:"https://doi.org/10.1109/ICDE.2013.6544834"},"https://doi.org/10.1109/ICDE.2013.6544834"),"."),(0,a.kt)("li",{parentName:"ul"},"\u201cCache-Oblivious B-Trees.\u201d ",(0,a.kt)("a",{parentName:"li",href:"https://doi.org/10.1137/S0097539701389956"},"https://doi.org/10.1137/S0097539701389956"),".")))}c.isMDXComponent=!0}}]);